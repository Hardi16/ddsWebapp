import React, { useState, useEffect } from "react";
import styles from "../../components/Styles.module.css";
import classes from "./DischargeSummary.module.css";
import _, { forEach } from "lodash";
import { Button, Spinner } from "react-bootstrap";
import { Redirect } from "react-router";
import MakeMediGrpModal from "../../components/MakeMediGrpModal";
import axios from "axios";
import { hostAddress } from "../../assets/config";
import { currentServer } from "../../assets/config";
import DischargeSummaryRightPane from "../../components/DischargeSummaryRightPane";
import DSCreateLeftPaneMedicines from "../../components/DSCreateLeftPaneMedicines";
import DSCreateLeftPaneDiagnosis from "../../components/DSCreateLeftPaneDiagnosis";
import DSCreateLeftPaneInvestigation from "../../components/DSCreateLeftPaneInvestigation";
import DSCreateLeftPanePhysicalExam from "../../components/DSCreateLeftPanePhysicalExam";
import DSCreateLeftPaneUploads from "../../components/DSCreateLeftPaneUploads";
import DSCreateLeftPaneDietAndOthers from "../../components/DSCreateLeftPaneDietAndOthers";
import DSCreateLeftPaneHistoryOfPresentIllness from "../../components/DSCreateLeftPaneHistoryOfPresentIllness";
import DSCreateLeftPaneLanding from "../../components/DSCreateLeftPaneLanding";
import DSCreateLeftPanePastMedicalHistory from "../../components/DSCreateLeftPanePastMedicalHistory";
import DSCreateLeftPanePastSurgicalHistory from "../../components/DSCreateLeftPanePastSurgicalHistory";
import DSCreateLeftPaneFamilyHistory from "../../components/DSCreateLeftPaneFamilyHistory";
import DSCreateLeftPaneToxicity from "../../components/DSCreateLeftPaneToxicity";
import DSCreateLeftPaneSite from "../../components/DSCreateLeftPaneSite";
import HamburgerDropdown from "../../components/HamburgerDropdown";
import { ListItemText } from "@material-ui/core";

const DischargeSummaryCreate = (props) => {
  const [redirect, setRedirect] = useState(null);
  const [prompt, setPrompt] = useState(false);
  const [mediArr, setMediArr] = useState([]);
  const [mediToAddArr, setMediToAddArr] = useState([]);
  const [mediToAddWithArr, setMediToAddWithBrackArr] = useState([]);
  const [medicineName, setMedicineName] = useState();
  const [mediObj, setMediObj] = useState({});
  const [mediObjWithBrack, setMediObjWithBrack] = useState({});
  const [leftContentMedi, setLeftContentMedi] = useState();
  const [favChecked, setFavChecked] = useState({});
  const [grpChecked, setGrpChecked] = useState({});
  const [leftContent, setLeftContent] = useState(leftContentMedi);
  const [onPage, setOnPage] = useState("home");
  const [btnHeaderStyleObj, setBtnHeaderStyleObj] = useState({ home: true });
  const [grpSel, setGrpSel] = useState({});
  const [redirectVar, setRedirectVar] = useState(null);
  const [leftPaneLabel, setLeftPaneLabel] = useState("LandingLeftDSC");
  const [leftPaneSansMedicine, setLeftPaneSansMedicine] = useState(null);
  const [diagnosisContent, setDiagnosisContent] = useState([]);
  const [investigationContent, setInvestigationContent] = useState([]);
  const [createDsStateChange, setCreateDsStateChange] = useState([]);
  const [leftPrompt, setLeftPrompt] = useState(0);
  const [dateOfDischarge, setDateOfDischarge] = useState(new Date());
  const [dateOfAdmission, setDateOfAdmission] = useState(new Date());
  const [loader, setLoader] = useState(null);
  let patient,
    mediSet,
    mediNameWithBrackSet,
    patientId,
    ptCaseID,
    evolkoId,
    cellphone,
    patientName,
    age,
    email,
    visitId;
  const setConfigurations = () => {
    console.log("DischargeSummaryCreate props", props);
    patient =
      props.location != null && props.location.state != null
        ? props.location.state.patient
        : localStorage.getItem("patient");

    console.log("patient:", patient);
    mediSet = new Set();
    mediNameWithBrackSet = new Set();
    patientId =
      props.location != null && props.location.state != null
        ? props.location.state.patient["id"]
        : null;
    ptCaseID =
      props.location != null && props.location.state != null
        ? props.location.state.patient["ptcaseId"]
        : null;

    evolkoId =
      props.location != null && props.location.state != null
        ? props.location.state.patient["cardNumber"]
        : null;
    cellphone =
      props.location != null && props.location.state != null
        ? props.location.state.patient["celllphone"]
        : null;
    patientName =
      props.location != null && props.location.state != null
        ? props.location.state.patient["name"]
        : null;
    age =
      props.location != null && props.location.state != null
        ? props.location.state.patient["age"]
        : null;
    email =
      props.location != null && props.location.state != null
        ? props.location.state.patient["email"]
        : null;
  };
  setConfigurations();
  useEffect(() => {
    let savedObject = JSON.parse(localStorage.getItem("savedObject"));
    console.log("savedObject", savedObject);
    for (let i in savedObject) {
      let obj = savedObject[i];
      if (obj["displayText"] == "Patient Information") {
        console.log("PIobj", obj);
        let lsObj = {};
        obj["groupedDetails"].forEach((item) => {
          lsObj[item["_name"]] = item["_description"];
        });
        localStorage.setItem("patientInformationObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Diagnosis On Admission") {
        let lsObj = JSON.stringify(obj["_description"].split(","));
        localStorage.setItem("diagnosisContent", lsObj);
      } else if (obj["displayText"] == "Diagnosis On Discharge") {
        let lsObj = obj["_description"];
        localStorage.setItem("diagnosisOnDischarge", lsObj);
      } else if (obj["displayText"] == "Chief Complaint") {
        let lsObj = obj["_description"];
        localStorage.setItem("chiefComplaint", lsObj);
      } else if (
        obj["displayText"] == "History of Present Illness & Obs Profile"
      ) {
        let lsObj = {};
        for (let i in obj["groupedDetails"]) {
          lsObj[obj["groupedDetails"][i]["displayText"]] = {};
          for (let j in obj["groupedDetails"][i]["groupedDetails"]) {
            let name = obj["groupedDetails"][i]["groupedDetails"][j]["_name"];
            let desc =
              obj["groupedDetails"][i]["groupedDetails"][j]["_description"];
            lsObj[obj["groupedDetails"][i]["displayText"]][name] = desc;
          }
        }
        localStorage.setItem(
          "historyOfPresentIllnessObj",
          JSON.stringify(lsObj)
        );
      } else if (obj["displayText"] == "Past Medical History") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          let key = lsArr[i].split("-")[0];
          let val = lsArr[i].split("-")[1];
          lsObj[key] = lsObj[key] == null ? {} : lsObj[key];
          lsObj[key][val] = true;
        }
        if (!(Object.keys(lsObj).length == 1 && Object.keys(lsObj)[0] == ""))
          localStorage.setItem("pastMedicalHistoryObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Past Surgical History") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          let key = lsArr[i].split("-")[0];
          let val = lsArr[i].split("-")[1];
          lsObj[key] = lsObj[key] == null ? {} : lsObj[key];
          lsObj[key][val] = true;
        }
        if (!(Object.keys(lsObj).length == 1 && Object.keys(lsObj)[0] == ""))
          localStorage.setItem("pastSurgicalHistoryObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Family History") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          let key = lsArr[i].split("-")[0];
          let val = lsArr[i].split("-")[1];
          lsObj[key] = lsObj[key] == null ? {} : lsObj[key];
          lsObj[key][val] = true;
        }
        if (!(Object.keys(lsObj).length == 1 && Object.keys(lsObj)[0] == ""))
          localStorage.setItem("familyHistoryObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Allergies") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          lsObj[lsArr[i]] = true;
        }
        localStorage.setItem("allergiesObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Vitals on Admission") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          let key = lsArr[i].split("-")[0];
          let val = lsArr[i].split("-")[1];
          lsObj[key] = val;
        }
        localStorage.setItem("vitalsOnAdmissionObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Investigations at the Hospital") {
        let lsObj = obj["_description"];
        localStorage.setItem("investigationsAtTheHospital", lsObj);
      } else if (obj["displayText"] == "Investigations at the Hospital") {
        let lsObj = obj["_description"];
        localStorage.setItem("investigationsAtTheHospital", lsObj);
      } else if (obj["displayText"] == "Procedure Done") {
        let lsObj = obj["_description"];
        localStorage.setItem("procedureDone", lsObj);
      } else if (obj["displayText"] == "Procedure Findings") {
        let lsObj = obj["_description"];
        localStorage.setItem("procedureFindings", lsObj);
      } else if (obj["displayText"] == "Course in the Hospital") {
        let lsObj = obj["_description"];
        localStorage.setItem("courseInTheHospital", lsObj);
      } else if (obj["displayText"] == "Treatment Given") {
        let lsObj = obj["_description"];
        localStorage.setItem("treatmentGiven", lsObj);
      } else if (obj["displayText"] == "Vitals on Discharge") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          let key = lsArr[i].split("-")[0];
          let val = lsArr[i].split("-")[1];
          lsObj[key] = val;
        }
        localStorage.setItem("vitalsOnDischargeObj", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Condition at Discharge") {
        let lsObj = {};
        lsObj[obj["_description"]] = true;
        localStorage.setItem("conditionAtDischarge", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Dietary Instructions") {
        let lsObj = {};
        lsObj[obj["_description"]] = true;
        localStorage.setItem("dietaryInstructions", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Therapy Orders") {
        let lsObj = {};
        lsObj[obj["_description"]] = true;
        localStorage.setItem("therapyOrders", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Activity Orders") {
        let lsObj = {};
        lsObj[obj["_description"]] = true;
        localStorage.setItem("activityOrders", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Disposition To") {
        let lsObj = {};
        lsObj[obj["_description"]] = true;
        localStorage.setItem("dispostionTo", JSON.stringify(lsObj));
      } else if (obj["displayText"] == "Advised Investigations") {
        let lsArr = obj["_description"].split(",");
        localStorage.setItem("investigationContent", JSON.stringify(lsArr));
      } else if (obj["displayText"] == "Advice on Discharge") {
        let lsObj = obj["_description"];
        localStorage.setItem("adviceOnDischarge", lsObj);
      } else if (obj["displayText"] == "Plans for Medical Follow-up") {
        let lsArr = obj["_description"].split(",");
        let lsObj = {};
        for (let i in lsArr) {
          let key = lsArr[i].split("-")[0];
          let val = lsArr[i].split("-")[1];
          lsObj[key] = val;
        }
        localStorage.setItem(
          "plansForMedicalFollowUpObj",
          JSON.stringify(lsObj)
        );
      } else if (
        obj["displayText"] == "HealthRADAR Monitoring (Duration, Condition)"
      ) {
        let lsObj = obj["_description"];
        localStorage.setItem("healthRadarMonitoringDurationCondition", lsObj);
      } else if (obj["displayText"] == "Doctor's Signature") {
        let lsObj = obj["_description"];
        localStorage.setItem("doctorsSignature", lsObj);
      } else if (obj["displayText"] == "Patient's Signature") {
        let lsObj = obj["_description"];
        localStorage.setItem("patientsSignature", lsObj);
      }
    }
  }, []);
  useEffect(() => {
    if (leftPaneLabel == "LandingLeftDSC") {
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneLanding
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    }
    if (leftPaneLabel == "Diagnosis")
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneDiagnosis
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    if (leftPaneLabel == "Investigation")
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneInvestigation
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    if (leftPaneLabel == "PhysicalExam")
      setLeftPaneSansMedicine(
        <DSCreateLeftPanePhysicalExam
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    if (leftPaneLabel == "Toxicity")
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneToxicity
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    if (leftPaneLabel == "Site")
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneSite
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    if (leftPaneLabel == "History of Present Illness & Obs Profile")
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneHistoryOfPresentIllness
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );

    if (leftPaneLabel == "Past Medical History")
      setLeftPaneSansMedicine(
        <DSCreateLeftPanePastMedicalHistory
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
          setLeftPaneLabel={setLeftPaneLabel}
        />
      );
    if (leftPaneLabel == "Past Surgical History")
      setLeftPaneSansMedicine(
        <DSCreateLeftPanePastSurgicalHistory
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    if (leftPaneLabel == "Family History")
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneFamilyHistory
          setRedirect={setRedirect}
          getSelectedMedFromSearch={getSelectedMedFromSearch}
          setLeftContent={setLeftContent}
          btnHeaderStyleObj={btnHeaderStyleObj}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          setOnPage={setOnPage}
          setPrompt={setPrompt}
          handleFavourites={handleFavourites}
          handleSelect={handleSelect}
          leftContent={leftContent}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
        />
      );
    //
    if (leftPaneLabel == "Dietary Instructions") {
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneDietAndOthers
          setRedirect={setRedirect}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
          createDsStateChange={createDsStateChange}
          label="Dietary Instructions"
          reqName="Diet"
        />
      );
    }
    if (leftPaneLabel == "Condition at Discharge") {
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneDietAndOthers
          setRedirect={setRedirect}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
          createDsStateChange={createDsStateChange}
          label="Condition at Discharge"
          reqName="Condition"
        />
      );
    }
    if (leftPaneLabel == "Disposition To") {
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneDietAndOthers
          setRedirect={setRedirect}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
          createDsStateChange={createDsStateChange}
          label="Disposition To"
          reqName="Disposition"
        />
      );
    }
    if (leftPaneLabel == "Activity Orders") {
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneDietAndOthers
          setRedirect={setRedirect}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
          createDsStateChange={createDsStateChange}
          label="Activity Orders"
          reqName="Activity Orders"
        />
      );
    }
    if (leftPaneLabel == "Therapy Orders") {
      setLeftPaneSansMedicine(
        <DSCreateLeftPaneDietAndOthers
          setRedirect={setRedirect}
          leftPrompt={leftPrompt}
          setCreateDsStateChange={setCreateDsStateChange}
          createDsStateChange={createDsStateChange}
          label="Therapy Orders"
          reqName="Therapy Orders"
        />
      );
    }
  }, [leftPaneLabel, leftPrompt, createDsStateChange]); // for setting the left pane ie diagnosis and others
  const generateDischargeSummary = (patientId, caseId) => {
    let data = {
      patientId: patientId,
      caseId: caseId,
      finalizeFlag: 0,
    };
    console.log("generateDischargeSummary data", data);
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/DischargeSummaryWebService/generateDischargeData",
        data
      )
      .then((response) => {
        console.log("generateDischargeData resp", response.data);
        setRedirectVar(
          <Redirect
            to={{
              pathname: "/dischargeSummaryPage",
              state: { patient: patient },
            }}
          />
        );
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const setSaveTemp = () => {
    setRedirectVar(
      <Redirect
        to={{
          pathname: "/dischargeSummaryPage",
          state: { patient: patient },
        }}
      />
    );
  };
  const setPlanDrug = () => {
    let refJson = {
      drug: [
        {
          bidImage: "TwiceADay.png",
          dailyIntake: "3 Days units",
          drugForm: "Tab",
          "@": {
            text: "1 Tab Diclofenac bid for 3 Days After Food - 1hr after",
            genericfontStyle: "italic",
            manyGeneric: "(diclofenac sodium 50 mg) Orally ",
          },
        },
      ],
    };

    let planDrugJson = { drug: [] };
    let mediToAddArr =
      localStorage.getItem("mediToAddArr") == null
        ? []
        : localStorage.getItem("mediToAddArr").split(",");
    let freqValObj = JSON.parse(localStorage.getItem("freqValObj"));
    let brandValue = JSON.parse(localStorage.getItem("brandValue"));
    let allMedicineDeets = JSON.parse(localStorage.getItem("allMedicineDeets"));
    let quantValObj = JSON.parse(localStorage.getItem("quantValObj"));
    let tempArr = [];
    for (let index in mediToAddArr) {
      let medi = mediToAddArr[index];

      let brandName = "";
      if (medi === null || medi.trim() === "") continue;
      let tempObj = { "@": {} };
      if (medi != null) tempObj["drugForm"] = medi.split(" ")[0];
      tempObj["@"]["genericfontStyle"] = "italic";
      tempObj["@"]["manyGeneric"] = medi;
      if (allMedicineDeets != null && allMedicineDeets[medi] != null)
        tempObj["@"]["manyGeneric"] =
          tempObj["@"]["manyGeneric"] +
          " " +
          (allMedicineDeets[medi]["routeVal"] == null
            ? ""
            : allMedicineDeets[medi]["routeVal"]);
      if (tempObj["@"]["manyGeneric"] == null) tempObj["@"]["manyGeneric"] = "";
      if (allMedicineDeets != null && allMedicineDeets[medi] != null)
        tempObj["dailyIntake"] = allMedicineDeets[medi]["durVal"] + " units";
      if (brandValue != null && brandValue[medi] != null)
        brandName =
          brandValue[medi].split(",")[0] + "," + brandValue[medi].split(",")[1];
      if (
        quantValObj != null &&
        quantValObj[medi] != null &&
        medi != null &&
        freqValObj != null &&
        allMedicineDeets != null &&
        allMedicineDeets[medi] != null
      )
        tempObj["@"]["text"] =
          (quantValObj[medi][0] == null ? "" : quantValObj[medi][0]) +
          " " +
          medi.split(" ")[0] +
          " " +
          brandName +
          " " +
          (freqValObj[medi] == null ? "" : freqValObj[medi]) +
          " for " +
          (allMedicineDeets[medi]["durVal"] == null
            ? ""
            : allMedicineDeets[medi]["durVal"]) +
          " " +
          (allMedicineDeets[medi]["remarksVal"] == null
            ? ""
            : allMedicineDeets[medi]["remarksVal"]);
      if (tempObj["@"]["text"] == null) tempObj["@"]["text"] = "";
      if (medi[""] === "OID") tempObj["oidImage"] = "OnceADay.png";
      else if (freqValObj != null && freqValObj[medi] === "BID")
        tempObj["bidImage"] = "TwiceADay.png";
      else if (freqValObj != null && freqValObj[medi] === "TID")
        tempObj["tidImage"] = "ThreeTimesADay.png";
      else if (freqValObj != null && freqValObj[medi] === "QID")
        tempObj["qidImage"] = "FourTimesADay.png";
      else if (freqValObj != null && freqValObj[medi] === "6 Times")
        tempObj["sixTimesImage"] = "SixTimesADay.png";
      else if (freqValObj != null && freqValObj[medi] === "8 Times")
        tempObj["eightTimesImage"] = "EightTimesADay.png";
      tempArr.push(tempObj);
    }
    planDrugJson["drug"] = tempArr;
    console.log("planDrugJson", planDrugJson);
    let js2xmlparser = require("js2xmlparser");
    let planDrugXml = js2xmlparser.parse("drugs", planDrugJson);
    console.log(planDrugXml);
    return planDrugXml;
  };
  const setPrintDrug = () => {
    let refJson = {
      drug: [
        {
          qty: "1 Tab to be taken ",
          pkg: "Tab",
          main_drug_name: "Diclofenac",
          diluent: "",
          diluent_volume: "",
          give_over_time: "",
          frequency: "bid",
          duration: "3 Days",
          remark: "After Food - 1hr after",
          sub_drug_name: "(diclofenac sodium 50 mg)",
          premedication_notes: "",
          multiDoseJson: "",
          route: "Orally",
          notes: "",
        },
      ],
    };
    let printDrugJson = { drug: [] };
    let mediToAddArr =
      localStorage.getItem("mediToAddArr") == null
        ? []
        : localStorage.getItem("mediToAddArr").split(",");
    let freqValObj = JSON.parse(localStorage.getItem("freqValObj"));
    let brandValue = JSON.parse(localStorage.getItem("brandValue"));
    let allMedicineDeets = JSON.parse(localStorage.getItem("allMedicineDeets"));
    let quantValObj = JSON.parse(localStorage.getItem("quantValObj"));
    let mediToAddWithBrackArr =
      localStorage.getItem("mediToAddWithBrackArr") == null
        ? []
        : localStorage.getItem("mediToAddWithBrackArr").split(",");
    let tempArr = [];
    for (let index in mediToAddArr) {
      let medi = mediToAddArr[index];
      let brandName;
      if (medi.trim() === "" || medi === null) continue;
      let tempObj = {};
      if (medi != null) tempObj["pkg"] = medi.split(" ")[0];
      if (allMedicineDeets != null && allMedicineDeets[medi] != null) {
        tempObj["route"] =
          allMedicineDeets[medi]["routeVal"] == null
            ? ""
            : allMedicineDeets[medi]["routeVal"];
        tempObj["duration"] = allMedicineDeets[medi]["durVal"];
        tempObj["remark"] = allMedicineDeets[medi]["remarksVal"];
      }
      if (freqValObj != null) tempObj["frequency"] = freqValObj[medi];
      if (
        quantValObj != null &&
        medi != undefined &&
        quantValObj[medi] != undefined
      )
        tempObj["qty"] =
          quantValObj[medi][0] + " " + medi.split(" ")[0] + " to be taken";
      if (mediToAddWithBrackArr != null)
        tempObj["sub_drug_name"] = mediToAddWithBrackArr[index];
      tempObj["premedication_notes"] = "";
      tempObj["multiDoseJson"] = "";
      tempObj["notes"] = "";
      tempObj["give_over_time"] = "";
      tempObj["diluent_volume"] = "";
      tempObj["diluent"] = "";
      if (brandValue != null && brandValue[medi] != null)
        brandName = brandValue[medi].split(",")[1];
      tempObj["main_drug_name"] = brandName;
      tempArr.push(tempObj);
    }
    printDrugJson["drug"] = tempArr;
    console.log("printDrugJson", printDrugJson);
    let js2xmlparser = require("js2xmlparser");
    let printDrugXml = js2xmlparser.parse("drugs", printDrugJson);
    console.log(printDrugXml);
    return printDrugXml;
  };
  const setSaveParameters = (id, sectionName) => {
    let camelCaseName = _.camelCase(sectionName);
    let _nameVal = "",
      displayTextVal = sectionName;
    if (sectionName == "Treatment Protocol") _nameVal = "Treatment Protocol";
    if (sectionName == "Patient Information") _nameVal = "Admission Details";
    if (sectionName == "Diagnosis on Admission") _nameVal = "Diagnosis";
    if (sectionName == "Diagnosis at Discharge")
      _nameVal = "Diagnosis at Discharge";
    if (sectionName == "Reason for Admission")
      _nameVal = "Reason for Admission";
    if (sectionName == "Chief Complaint") _nameVal = "Complaint";
    if (sectionName == "History of Present Illness & Obs Profile") {
      _nameVal = "Clinical History";
      displayTextVal = "History";
    }

    let saveObj = {
      _description: "",
      _id: id,
      _name: _nameVal,
      dataVisibility: 0,
      displayText: displayTextVal,
      dynamicSection: false,
      editableData: false,
      finalValue: "",
      groupedDetails: [],
      isDescription1Exist: false,
      modified: false,
      protocolDataArrayPresent: false,
      saveAsCategoryList: false,
      selected: true,
      selectedRxList: [],
      sequenceId: 10,
      showEditBtn: true,
      titleColor: -256,
      titleVisibility: 0,
    };
    let camelCaseNameWObj = _.camelCase(camelCaseName + "Obj");

    let withoutObj = [
      "Chief Complaint",
      "Menstrual/Obstetric History",
      "Diagnosis On Discharge",
      "Findings",
      "Lab tests",
      "Complications",
      "Treatment Given",
      "Vitals at Discharge",
      "Advised Investigations",
      "Attached Images",
      "Advice on Discharge",
      "HealthRADAR Monitoring (Duration, Condition)",
    ];
    let spCase = [
      "Medications at Discharge",
      "Diagnosis On Admission",
      "Advised Investigations",
      "Physical Exam on Admission",
      "History of Present Illness & Obs Profile",
      "Patient Information",
    ];
    let checkboxCase = ["Allergies"];
    let dietAndOtherCardsCase = [
      "Dietary Instructions",
      "Therapy Orders",
      "Activity Orders",
      "Condition at Discharge",
      "Disposition To",
    ];
    let signObjects = ["Doctor's Signature", "Patient's Signature"];

    if (sectionName == "Patient Information") {
      saveObj["isHeaderItem"] = true;
      saveObj["isTabularForm"] = true;
      let piObj =
        JSON.parse(localStorage.getItem("patientInformationObj")) == null
          ? {}
          : JSON.parse(localStorage.getItem("patientInformationObj"));
      saveObj["groupedDetails"] = Object.keys(piObj).map((item) => {
        let obj = {
          _name: item,
          _description: piObj[item],
        };
        return obj;
      });
      console.log("piSaveObj", saveObj);
    } else if (sectionName == "Physical Exam on Admission") {
      let obj =
        JSON.parse(localStorage.getItem("physicalExamOnAdmissionObj")) == null
          ? {}
          : JSON.parse(localStorage.getItem("physicalExamOnAdmissionObj"));
      let grpArr = [];
      for (let i in obj) {
        //i gen phy exam
        let jarr = [];
        for (let j in obj[i]) {
          // j skin
          let kval = [];
          for (let k in obj[i][j]) {
            //k clinically
            let lval = "";
            for (let l in obj[i][j][k]) {
              //l NAD
              if (obj[i][j][k][l]) lval = i;
            }
            if (lval != "") kval.push(k + "-" + lval);
          }
          jarr.push({ _name: j, _description: kval.toString() });
        }
        grpArr.push({ displayText: i, groupedDetails: jarr });
      }
      saveObj["groupedDetails"] = grpArr;
      console.log("groupedDetails phy exam", saveObj["groupedDetails"]);
    } else if (sectionName == "History of Present Illness & Obs Profile") {
      let obj =
        JSON.parse(localStorage.getItem("historyOfPresentIllnessObj")) == null
          ? {}
          : JSON.parse(localStorage.getItem("historyOfPresentIllnessObj"));
      let grpArr = [];
      for (let i in obj) {
        //i gen obs score
        let jarr = [];
        for (let j in obj[i]) {
          // j G
          let kval = obj[i][j];
          jarr.push({ _name: j, _description: kval.toString() });
        }
        grpArr.push({ displayText: i, groupedDetails: jarr });
      }
      saveObj["groupedDetails"] = grpArr;
      console.log(
        "groupedDetails history of illness",
        saveObj["groupedDetails"]
      );
    } else if (sectionName == "Diagnosis On Admission") {
      let arr =
        localStorage.getItem("diagnosisContent") == null
          ? []
          : JSON.parse(localStorage.getItem("diagnosisContent"));
      saveObj["_description"] =
        arr.toString() +
        (localStorage.getItem("advisedInvestigations") != null
          ? ", " + localStorage.getItem("diagnosisOnAdmission")
          : "");
      saveObj["finalValue"] =
        arr.toString() +
        (localStorage.getItem("advisedInvestigations") != null
          ? ", " + localStorage.getItem("diagnosisOnAdmission")
          : "");
    } else if (sectionName == "Advised Investigations") {
      let arr =
        localStorage.getItem("investigationContent") == null
          ? []
          : JSON.parse(localStorage.getItem("investigationContent"));
      saveObj["_description"] =
        arr.toString() +
        (localStorage.getItem("advisedInvestigations") != null
          ? ", " + localStorage.getItem("advisedInvestigations")
          : "");
      saveObj["finalValue"] =
        arr.toString() +
        (localStorage.getItem("advisedInvestigations") != null
          ? ", " + localStorage.getItem("advisedInvestigations")
          : "");
    } else if (sectionName == "Medications at Discharge") {
      let obj1 =
        localStorage.getItem("mediObj") == null
          ? {}
          : JSON.parse(localStorage.getItem("mediObj"));

      let arr1 = [];
      for (let key in obj1) if (obj1[key]) arr1.push(key);
      let obj2 =
        localStorage.getItem("allMedicineDeets") == null
          ? null
          : JSON.parse(localStorage.getItem("allMedicineDeets"));
      let mediNotes =
        localStorage.getItem("medicationsAtDischargeNotes") == null
          ? ""
          : localStorage.getItem("medicationsAtDischargeNotes");
      if (obj2 == null) {
        saveObj["_description"] =
          arr1.toString() +
          (arr1.toString() == "" ? " " + mediNotes : ", " + mediNotes);
        saveObj["finalValue"] =
          arr1.toString() +
          (arr1.toString() == "" ? " " + mediNotes : ", " + mediNotes);
      } else {
        let arr2 = [];
        let brandVal =
          localStorage.getItem("brandValue") == null
            ? null
            : JSON.parse(localStorage.getItem("brandValue"));
        let freqVal =
          localStorage.getItem("freqValObj") == null
            ? null
            : JSON.parse(localStorage.getItem("freqValObj"));
        let quantVal =
          localStorage.getItem("quantValObj") == null
            ? null
            : JSON.parse(localStorage.getItem("quantValObj"));
        let selectedRxList = [];
        for (let i in obj2) {
          let bval = "";
          let fval = "";
          let qval = "";
          if (brandVal != null) bval = brandVal[i] == null ? "" : brandVal[i];
          if (freqVal != null) fval = freqVal[i] == null ? "" : freqVal[i];
          if (quantVal != null) qval = quantVal[i] == null ? "" : quantVal[i];
          let medicineDisplayStrForRx =
            i != null && bval != null
              ? "- " + i.split(" ")[0] + " " + bval.split(",").length > 0
                ? bval.split(",")[0]
                : ""
              : "" + " " + i + " " + qval + " " + i != null
              ? i.split(" ")[0]
              : "" + " to be taken" + obj2[i]["routeVal"] == null
              ? ""
              : obj2[i]["routeVal"] + ", " + fval + " x " + obj2[i]["durVal"] ==
                null
              ? ""
              : obj2[i]["durVal"];
          let rxobj = {
            brandDrugID: 3,
            brandDrugName:
              bval != null
                ? bval.split(",").length > 0
                  ? bval.split(",")[0]
                  : ""
                : "",
            categoryId: 510126,
            categoryName: "All",
            dataFromDB: false,
            doseBasisType: "mg/kg",
            duration:
              obj2[i]["durVal"] == null ? "" : obj2[i]["durVal"].split(",")[0],
            durationLabel:
              obj2[i]["durVal"] == null
                ? ""
                : obj2[i]["durVal"].split(",").length > 1
                ? obj2[i]["durVal"].split(",")[1]
                : "",
            favourite: true,
            frequency: fval,
            fullDuration: "Duration",
            genericId: 111850,
            genericName: i,
            genericQtyUOM: i,
            manufacturer:
              bval != null
                ? bval.split(",").length > 1
                  ? bval.split(",")[1]
                  : ""
                : "",
            medicineDisplayStr: medicineDisplayStrForRx,
            pediatricDoseGiven: false,
            pkgCode: i != null ? i.split(" ")[0] : "",
            price:
              bval != null
                ? bval.split(",").length > 2
                  ? bval.split(",")[2]
                  : ""
                : "",
            quaninty: qval.toString(),
            quanintyUnit: i != null ? i.split(" ")[0] : "",
            rxNotes: obj2[i]["routeVal"] == null ? "" : obj2[i]["routeVal"],
            rxRemarks:
              obj2[i]["remarksVal"] == null ? "" : obj2[i]["remarksVal"],
            selected: true,
            tempDrugID: "3",
            checked: false,
            id: 3,
            matchStr:
              bval != null && i != null
                ? bval.split(",").length > 0
                  ? bval.split(",")[0]
                  : "" +
                      " " +
                      i +
                      " " +
                      i.split(" ")[0] +
                      bval.split(",").length >
                    1
                  ? bval.split(",")[1]
                  : ""
                : "",
          };

          selectedRxList.push(rxobj);
          let mediNotesRxObj =
            localStorage.getItem("medicationsAtDischargeNotes") == null
              ? {}
              : {
                  brandDrugID: 3,
                  brandDrugName: "",
                  categoryId: 510126,
                  categoryName: "All",
                  dataFromDB: false,
                  doseBasisType: "mg/kg",
                  duration: "",
                  durationLabel: "",
                  favourite: true,
                  frequency: "",
                  fullDuration: "",
                  genericId: 111850,
                  genericName: "",
                  genericQtyUOM: "",
                  manufacturer: "",
                  medicineDisplayStr: localStorage.getItem(
                    "medicationsAtDischargeNotes"
                  ),
                  pediatricDoseGiven: false,
                  pkgCode: "",
                  price: "",
                  quaninty: "1",
                  quanintyUnit: "",
                  rxNotes: "",
                  rxRemarks: "",
                  selected: true,
                  tempDrugID: "3",
                  checked: false,
                  id: 3,
                  matchStr: localStorage.getItem("medicationsAtDischargeNotes"),
                };
          bval =
            bval == "" || bval == undefined
              ? (bval = "")
              : ", of Brand: " + bval;
          fval = fval == "" || fval == undefined ? (fval = "") : ", " + fval;
          arr2.push(i + ": " + Object.values(obj2[i]).toString() + bval + fval);
        }
        for (let j in obj1) {
          if (obj1[j] && !(j in obj2)) arr2.push(j);
        }
        saveObj["_description"] = arr2.join("\n") + ", " + mediNotes;
        saveObj["finalValue"] = arr2.join("\n") + ", " + mediNotes;
        saveObj["selectedRxList"] = selectedRxList;
      }
      console.log("medicationsAtDischarge all", saveObj);
    }
    if (sectionName == "Patient Information") {
      // let val =
      //   localStorage.getItem("patientInformationObj") == null
      //     ? ""
      //     : localStorage.getItem("patientInformationObj");
      // saveObj["_description"] = val;
      // saveObj["finalValue"] = val;
    } else if (withoutObj.includes(sectionName)) {
      let val =
        localStorage.getItem(camelCaseName) == null
          ? ""
          : localStorage.getItem(camelCaseName);

      saveObj["_description"] = val;
      saveObj["finalValue"] = val;
    } else if (
      !withoutObj.includes(sectionName) &&
      !spCase.includes(sectionName) &&
      !checkboxCase.includes(sectionName) &&
      !dietAndOtherCardsCase.includes(sectionName) &&
      !signObjects.includes(sectionName)
    ) {
      let obj = JSON.parse(localStorage.getItem(camelCaseNameWObj));
      if (obj == null) {
        let val =
          localStorage.getItem(camelCaseName) == null
            ? ""
            : localStorage.getItem(camelCaseName);

        saveObj["_description"] = val;
        saveObj["finalValue"] = val;
      } else {
        console.log("obj", obj);
        let arr = [];
        for (let objitem in obj) {
          let key = objitem;
          let val = obj[key];
          if (typeof val === "object" && val !== null) {
            val = val[Object.keys(val)[0]] ? Object.keys(val)[0] : "";
            if (val != "") {
              arr.push(key + "-" + val);
            }
          } else if (val == true || val == false) {
            arr.push(key);
          } else arr.push(key + "-" + val);
        }
        saveObj["_description"] = arr.toString();
        saveObj["finalValue"] = arr.toString();
      }
    } else if (
      !spCase.includes(sectionName) &&
      checkboxCase.includes(sectionName)
    ) {
      let obj = JSON.parse(localStorage.getItem(camelCaseNameWObj));
      let arr = [];
      for (let objitem in obj) {
        let key = objitem;
        let val = obj[key];
        if (val == true) arr.push(key);
      }
      saveObj["_description"] = arr.toString();
      saveObj["finalValue"] = arr.toString();
    } else if (
      !spCase.includes(sectionName) &&
      dietAndOtherCardsCase.includes(sectionName)
    ) {
      let obj = JSON.parse(localStorage.getItem(camelCaseName));
      let arr = [];
      for (let objitem in obj) {
        let key = objitem;
        let val = obj[key];
        if (val == true) arr.push(key);
      }
      saveObj["_description"] = arr.toString();
      saveObj["finalValue"] = arr.toString();
    } else if (signObjects.includes(sectionName)) {
      let val =
        localStorage.getItem(camelCaseName) == null
          ? ""
          : localStorage.getItem(camelCaseName);
      let ptLine =
        sectionName == "Patient's Signature"
          ? "I have received all relevant documents and records"
          : "";
      saveObj["_description"] = val + "\n " + ptLine;
      saveObj["finalValue"] = val + "\n " + ptLine;
    }

    return saveObj;
  };
  const setHistoryFields = (id) => {
    let saveObj = {
      _description: "",
      _id: id,
      _name: "Clinical History",
      dataVisibility: 0,
      displayText: "History",
      dynamicSection: false,
      editableData: false,
      finalValue: "",
      groupedDetails: [],
      isDescription1Exist: false,
      modified: false,
      protocolDataArrayPresent: false,
      saveAsCategoryList: false,
      selected: true,
      selectedRxList: [],
      sequenceId: 10,
      showEditBtn: true,
      titleColor: -256,
      titleVisibility: 0,
    };
    let groupedDetailsMediHis = {
      _description: "",
      _id: 0,
      _name: "Past Medical History",
      dataVisibility: 0,
      dynamicSection: true,
      editableData: false,
      isDescription1Exist: false,
      isHeaderItem: false,
      modified: false,
      parentSection: "Clinical History",
      protocolDataArrayPresent: false,
      saveAsCategoryList: false,
      selected: false,
      selectedRxList: [],
      sequenceId: 0,
      titleColor: 0,
      titleVisibility: 0,
    };
    let groupedDetailsSurgHis = {
      _description: "",
      _id: 0,
      _name: "Past Surgical History",
      dataVisibility: 0,
      dynamicSection: true,
      editableData: false,
      isDescription1Exist: false,
      isHeaderItem: false,
      modified: false,
      parentSection: "Clinical History",
      protocolDataArrayPresent: false,
      saveAsCategoryList: false,
      selected: false,
      selectedRxList: [],
      sequenceId: 0,
      titleColor: 0,
      titleVisibility: 0,
    };
    let groupedDetailsFamHis = {
      _description: "",
      _id: 0,
      _name: "Family History",
      dataVisibility: 0,
      dynamicSection: true,
      editableData: false,
      isDescription1Exist: false,
      isHeaderItem: false,
      modified: false,
      parentSection: "Clinical History",
      protocolDataArrayPresent: false,
      saveAsCategoryList: false,
      selected: false,
      selectedRxList: [],
      sequenceId: 0,
      titleColor: 0,
      titleVisibility: 0,
    };

    let pastMedicalHistoryObj = JSON.parse(
      localStorage.getItem("pastMedicalHistoryObj")
    );
    let pastMedicalHistoryObjStr =
      pastMedicalHistoryObj == null
        ? ""
        : Object.keys(pastMedicalHistoryObj)
            .map((item) => {
              let obj = pastMedicalHistoryObj[item];
              if (obj[Object.keys(obj)[0]]) {
                if (Object.keys(obj)[0] == "Yes") return item;
                else return item + "-" + Object.keys(obj)[0];
              }
            })
            .filter((ele) => ele != null || ele != "");
    pastMedicalHistoryObjStr = pastMedicalHistoryObjStr.toString();
    groupedDetailsMediHis["_description"] = pastMedicalHistoryObjStr;

    let pastSurgicalHistoryObj = JSON.parse(
      localStorage.getItem("pastSurgicalHistoryObj")
    );
    let pastSurgicalHistoryObjStr =
      pastSurgicalHistoryObj == null
        ? ""
        : Object.keys(pastSurgicalHistoryObj)
            .map((item) => {
              let obj = pastSurgicalHistoryObj[item];
              if (obj[Object.keys(obj)[0]]) {
                if (Object.keys(obj)[0] == "Yes") return item;
                else return item + "-" + Object.keys(obj)[0];
              }
            })
            .filter((ele) => ele != null || ele != "");
    pastSurgicalHistoryObjStr = pastSurgicalHistoryObjStr.toString();
    groupedDetailsSurgHis["_description"] = pastSurgicalHistoryObjStr;

    let familyHistoryObj = JSON.parse(localStorage.getItem("familyHistoryObj"));
    let familyHistoryObjStr =
      familyHistoryObj == null
        ? ""
        : Object.keys(familyHistoryObj)
            .map((item) => {
              let obj = familyHistoryObj[item];
              if (Object.keys(obj).length <= 1 && obj[Object.keys(obj)[0]]) {
                if (Object.keys(obj)[0] == "Yes") return item;
                else return item + "-" + Object.keys(obj)[0];
              } else {
                let arrtemp = Object.keys(obj)
                  .map((ele) => {
                    return obj[ele] ? ele : null;
                  })
                  .filter((ele) => ele != null);
                let strtemp = arrtemp.toString();
                return arrtemp.length > 0 ? item + "-" + strtemp : "";
              }
            })
            .filter((ele) => ele != null || ele != "");
    familyHistoryObjStr = familyHistoryObjStr.toString();
    groupedDetailsFamHis["_description"] = familyHistoryObjStr;

    saveObj["groupedDetails"].push(groupedDetailsMediHis);
    saveObj["groupedDetails"].push(groupedDetailsSurgHis);
    saveObj["groupedDetails"].push(groupedDetailsFamHis);

    return saveObj;
  };
  const setMedicationFields = (id) => {
    let saveObj = {
      _description: "",
      _id: id,
      _name: "Medicines",
      dataVisibility: 8,
      displayText: "Medicines",
      dynamicSection: false,
      editableData: false,
      finalValue: "",
      groupedDetails: [],
      isDescription1Exist: false,
      isHeaderItem: false,
      modified: false,
      protocolDataArrayPresent: false,
      saveAsCategoryList: false,
      selected: true,
      selectedRxList: [],
      sequenceId: 70,
      showEditBtn: true,
      titleColor: -15560961,
      titleVisibility: 0,
    };

    let mediObj =
      JSON.parse(localStorage.getItem("mediObj")) == null
        ? {}
        : JSON.parse(localStorage.getItem("mediObj"));
    let allMedicineDeets =
      JSON.parse(localStorage.getItem("allMedicineDeets")) == null
        ? {}
        : JSON.parse(localStorage.getItem("allMedicineDeets"));
    let freqValObj =
      JSON.parse(localStorage.getItem("freqValObj")) == null
        ? {}
        : JSON.parse(localStorage.getItem("freqValObj"));
    let quantValObj =
      JSON.parse(localStorage.getItem("quantValObj")) == null
        ? {}
        : JSON.parse(localStorage.getItem("quantValObj"));
    let brandValue =
      JSON.parse(localStorage.getItem("brandValue")) == null
        ? {}
        : JSON.parse(localStorage.getItem("brandValue"));

    return saveObj;
  };
  const setVitalsFields = (id) => {
    let saveObj = {
      _id: 0,
      _name: "Vitals",
      dataVisibility: 0,
      dynamicSection: true,
      editableData: false,
      groupedDetails: [],
      isDescription1Exist: false,
      isHeaderItem: false,
      isTabularForm: true,
      modified: false,
      parentSection: "Clinical Exam",
      protocolDataArrayPresent: false,
      saveAsCategoryList: true,
      selected: true,
      selectedParentName: "Vitals",
      selectedRxList: [],
      sequenceId: 50,
      showEditBtn: true,
      titleColor: 0,
      titleVisibility: 0,
    };
    // let groupedDetailsMediHis = {
    //   _description: "",
    //   _id: 0,
    //   _name: "Past Medical History",
    //   dataVisibility: 0,
    //   dynamicSection: true,
    //   editableData: false,
    //   isDescription1Exist: false,
    //   isHeaderItem: false,
    //   modified: false,
    //   parentSection: "Clinical History",
    //   protocolDataArrayPresent: false,
    //   saveAsCategoryList: false,
    //   selected: false,
    //   selectedRxList: [],
    //   sequenceId: 0,
    //   titleColor: 0,
    //   titleVisibility: 0,
    // };
    // let groupedDetailsSurgHis = {
    //   _description: "",
    //   _id: 0,
    //   _name: "Past Surgical History",
    //   dataVisibility: 0,
    //   dynamicSection: true,
    //   editableData: false,
    //   isDescription1Exist: false,
    //   isHeaderItem: false,
    //   modified: false,
    //   parentSection: "Clinical History",
    //   protocolDataArrayPresent: false,
    //   saveAsCategoryList: false,
    //   selected: false,
    //   selectedRxList: [],
    //   sequenceId: 0,
    //   titleColor: 0,
    //   titleVisibility: 0,
    // };
    // let groupedDetailsFamHis = {
    //   _description: "",
    //   _id: 0,
    //   _name: "Family History",
    //   dataVisibility: 0,
    //   dynamicSection: true,
    //   editableData: false,
    //   isDescription1Exist: false,
    //   isHeaderItem: false,
    //   modified: false,
    //   parentSection: "Clinical History",
    //   protocolDataArrayPresent: false,
    //   saveAsCategoryList: false,
    //   selected: false,
    //   selectedRxList: [],
    //   sequenceId: 0,
    //   titleColor: 0,
    //   titleVisibility: 0,
    // };

    // let pastMedicalHistoryObj = JSON.parse(
    //   localStorage.getItem("pastMedicalHistoryObj")
    // );
    // let pastMedicalHistoryObjStr =
    //   pastMedicalHistoryObj == null
    //     ? ""
    //     : Object.keys(pastMedicalHistoryObj)
    //         .map((item) => {
    //           let obj = pastMedicalHistoryObj[item];
    //           if (obj[Object.keys(obj)[0]]) {
    //             if (Object.keys(obj)[0] == "Yes") return item;
    //             else return item + "-" + Object.keys(obj)[0];
    //           }
    //         })
    //         .filter((ele) => ele != null || ele != "");
    // pastMedicalHistoryObjStr = pastMedicalHistoryObjStr.toString();
    // groupedDetailsMediHis["_description"] = pastMedicalHistoryObjStr;

    // let pastSurgicalHistoryObj = JSON.parse(
    //   localStorage.getItem("pastSurgicalHistoryObj")
    // );
    // let pastSurgicalHistoryObjStr =
    //   pastSurgicalHistoryObj == null
    //     ? ""
    //     : Object.keys(pastSurgicalHistoryObj)
    //         .map((item) => {
    //           let obj = pastSurgicalHistoryObj[item];
    //           if (obj[Object.keys(obj)[0]]) {
    //             if (Object.keys(obj)[0] == "Yes") return item;
    //             else return item + "-" + Object.keys(obj)[0];
    //           }
    //         })
    //         .filter((ele) => ele != null || ele != "");
    // pastSurgicalHistoryObjStr = pastSurgicalHistoryObjStr.toString();
    // groupedDetailsSurgHis["_description"] = pastSurgicalHistoryObjStr;

    // let familyHistoryObj = JSON.parse(localStorage.getItem("familyHistoryObj"));
    // let familyHistoryObjStr =
    //   familyHistoryObj == null
    //     ? ""
    //     : Object.keys(familyHistoryObj)
    //         .map((item) => {
    //           let obj = familyHistoryObj[item];
    //           if (Object.keys(obj).length <= 1 && obj[Object.keys(obj)[0]]) {
    //             if (Object.keys(obj)[0] == "Yes") return item;
    //             else return item + "-" + Object.keys(obj)[0];
    //           } else {
    //             let arrtemp = Object.keys(obj)
    //               .map((ele) => {
    //                 return obj[ele] ? ele : null;
    //               })
    //               .filter((ele) => ele != null);
    //             let strtemp = arrtemp.toString();
    //             return arrtemp.length > 0 ? item + "-" + strtemp : "";
    //           }
    //         })
    //         .filter((ele) => ele != null || ele != "");
    // familyHistoryObjStr = familyHistoryObjStr.toString();
    // groupedDetailsFamHis["_description"] = familyHistoryObjStr;

    // saveObj["groupedDetails"].push(groupedDetailsMediHis);
    // saveObj["groupedDetails"].push(groupedDetailsSurgHis);
    // saveObj["groupedDetails"].push(groupedDetailsFamHis);

    // return saveObj;
  };
  const setSave = () => {
    let arr = [
      JSON.parse(localStorage.getItem("cardsLabel")),
      JSON.parse(localStorage.getItem("secHeadings")),
    ];
    console.log("cardsLabel+secHeadings", JSON.stringify(arr));
    let data = {
      userId: localStorage.getItem("userId"),
      doctorId: localStorage.getItem("doctorId"),
      cardSequence: arr,
    };
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/DischargeSummaryWebService/saveDsCardsSequence",
        data
      )
      .then((response) => {
        console.log("saveDsCardsSequence resp", response.data);
      })
      .catch((err) => console.log("err", err));
    let dataFetch = {
      patientList: [],
      last_synchronized_time_from_server: 0,
      os: "iOS",
      registrationID: "",
      doctorID: localStorage.getItem("doctorId"),
      orgId: localStorage.getItem("clinicId"),
    };
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/PatientWebService/fetchPatientAtDoctorLogin",
        dataFetch
      )
      .then((response) => {
        console.log("fetch patient resp final", response.data);
        let patientDetails = {};
        if (response.data != null) {
          for (let i in response.data["patientList"]) {
            if (response.data["patientList"][i]["patientID"] == patientId)
              patientDetails = response.data["patientList"][i];
          }
          console.log("patientId", patientId);
          console.log("patientDetails", patientDetails);
          // let planDrugXml = setPlanDrug();
          // planDrugXml = planDrugXml.substring(22); //29,len-8
          // console.log("planDrugXml", planDrugXml);
          // let printDrugXml = setPrintDrug();
          // printDrugXml = printDrugXml.substring(22);
          // console.log("printDrugXml", printDrugXml);
          let recordDisplayJsonArr = [];
          let cardsLabel = JSON.parse(localStorage.getItem("cardsLabel"));
          let id = 0;
          cardsLabel.forEach((label) => {
            if (
              label != "Course Label" &&
              label != "Instructions Label" &&
              label != "Past Medical History" &&
              label != "Past Surgical History" &&
              label != "Family History"
              // &&
              // label != "Medications at Discharge"
            ) {
              recordDisplayJsonArr.push(setSaveParameters(id, label));
              id++;
            }
          });
          recordDisplayJsonArr.push(setHistoryFields(id++));
          // recordDisplayJsonArr.push(setMedicationFields(id++));
          // recordDisplayJsonArr.push(setVitalsFields(id++));
          console.log("recordDisplayJsonArr", recordDisplayJsonArr);
          let visitDatajsonFormat = {
            PatientDetailVO: [patientDetails],
            complaintObject: [
              {
                Id: 0,
                complaintAreaId: 0,
                complaintId: 0,
                selected: true,
                specialtyId: 0,
                text: "",
              },
            ],
            DiagnosisObject: [
              {
                Question: "",
                complaintAreaId: 0,
                diagnosisCaseId: 204,
                diagnosisCaseName: "Common",
                diagnosisLaterality: "",
                diagnosisPertinents: "",
                diagnosisState: "",
                diagnosisStatus: "Active",
                quesId: 0,
                selected: true,
              },
            ],
            InvestigationObject: [
              {
                additionalNotes: "" + localStorage.getItem("investigation"),
                discount: 0,
                investId: 0,
                investName: "",
                selected: true,
                urgent: 0,
              },
            ],
            Allergies: [],
            patientInstruction:
              localStorage.getItem("instructions") == null
                ? ""
                : localStorage.getItem("instructions"),
            patientSelfMonitoring: "",
            historyObject: "",
            examination: "",
            physiotheraphyNotes: "",
            followUpNotes:
              localStorage.getItem("followup") == null
                ? ""
                : localStorage.getItem("followup"),
            remarks: "",
            patientMedicine: "",
            updateTraigeVisit: "0",
            medicineNotes: "",
            triageNotes: "",
            suggestedTreatmentNotes: "",
            prognosisNotes: "",
            chiefdifferentialDiagnosisNotes: "",
            patientVitals: null,
            patientAdvisedSurgery:
              localStorage.getItem("surgeryNotes") == null
                ? ""
                : localStorage.getItem("surgeryNotes"),
            patientTriageCondition: "",
            patientTriageResult: "",
            latitude: 0,
            longitude: 0,
            referTo: "",
            Chemotherapy:
              localStorage.getItem("chemotherapyNotes") == null
                ? ""
                : localStorage.getItem("chemotherapyNotes"),
            Radiation:
              localStorage.getItem("radiationTherapyNotes") == null
                ? ""
                : localStorage.getItem("radiationTherapyNotes"),
            Management: "",
            Diet: "",
            // plainDrugs: planDrugXml,
            // printDrugs: printDrugXml,
            tmoTabularDataXml: "",
            SectionList: "",
            DoctorFav: false,
            doctorID: localStorage.getItem("doctorId"),
            clinicID: localStorage.getItem("clinicId"),
            updatedByName: localStorage.getItem("userName"),
            updatedById: localStorage.getItem("userId"),
            patientID: patientId,
            evolkoID: evolkoId,
            ptCaseID: ptCaseID,
            todayVisitedDateTime: patientDetails["visitedonDateUTC"],
            sqlLiteVisitID: "25",
            doctorName: localStorage.getItem("doctorName"),
            clinicName: localStorage.getItem("clinicName"),
            patientName: patientName,
            patientCellPhone: cellphone,
            ptAge: age,
            userEmail: email,
            parentVisitId: 0,
            checkInType: "Discharge Summary",
            recordDisplayJson: recordDisplayJsonArr,
          };
          visitDatajsonFormat = JSON.stringify(visitDatajsonFormat);
          console.log("visitDatajsonFormat", visitDatajsonFormat);
          let data = {
            patientVisitDetails: [
              {
                deviceRegistrationID:
                  "eulu7zh2hTA:APA91bG9tPJ3JpnqqV7ZW7mwlH1CHSLA79aoguTDBgO3FdEUtFcaE7nBRr6p5fceHlduQ_nX9kAFre3RbhMhtuzViWzGyA-7mEcFwdIeQ5vh430EdZvUcyRW8lZQRFcEYgJUv4vvQyQ5",
                doctoID: localStorage.getItem("doctorId"),
                lastSyncTimeFromServer: 0,
                patientId: patientId,
                protocolId: 0,
                ptCaseID: ptCaseID,
                ptVisitSubList: [
                  {
                    evolkoId: evolkoId,
                    patientId: patientId,
                    protocolId: 0,
                    ptCaseID: ptCaseID,
                    referredByClinicID: 0,
                    referredByDoctorID: 0,
                    referredToClinicID: 0,
                    referredToDoctorID: 0,
                    sqlLiteID: 25,
                    sqlLiteVisitID: 25,
                    visitDatajsonFormat: visitDatajsonFormat,
                    // visitDatajsonFormat:
                    //   '{"PatientDetailVO":[{"addressLine1":" ","age":"30Y","allImgDownloaded":false,"city":"","clinicID":600022878,"country":"","dateofBirth":"1989-11-05","diagnosisName":"","emailID":"test2@xyz.com","evolkoID":919132,"fatherName":"","firstName":"test lab 5 nov 1","gender":"M","mobileNo1":"0000000000","mobileNo2":"","otherIDDetails":"","otherIdLabel":"","patientDOB":"Nov 5, 1989 00:00:00","patientExistOnRadar":4,"patientID":701671348,"patientSqlLiteID":11,"patientUserName":"919132","paymentDateUTC":0,"ptCaseID":38235,"radarEndDate":"","recordDateUTC":0,"recordParsedDataList":[],"registrationDateUTC":"1572949530000","sqlLiteID":11,"state":"","visitedOnDateUTCFromPTVisit":1593420333803,"visitedonDateUTC":"1572949529512"}],"complaintObject":[{"Id":0,"complaintAreaId":0,"complaintId":0,"selected":true,"specialtyId":0,"text":""}],"DiagnosisObject":[{"Question":"","complaintAreaId":0,"diagnosisCaseId":204,"diagnosisCaseName":"Common","diagnosisLaterality":"","diagnosisPertinents":"","diagnosisState":"","diagnosisStatus":"Active","quesId":0,"selected":true}],"InvestigationObject":[{"additionalNotes":"","discount":0,"investId":0,"investName":"","selected":true,"urgent":0}],"Allergies":[],"patientInstruction":"FROM REACT-DRINK WATER","patientSelfMonitoring":"","historyObject":"","examination":"","physiotheraphyNotes":"","followUpNotes":"","remarks":"","patientMedicine":"","updateTraigeVisit":"0","medicineNotes":"","triageNotes":"","suggestedTreatmentNotes":"","prognosisNotes":"","chiefdifferentialDiagnosisNotes":"","patientVitals":null,"patientAdvisedSurgery":"","patientTriageCondition":"","patientTriageResult":"","latitude":0,"longitude":0,"referTo":"","Chemotherapy":"","Radiation":"","Management":"","Diet":"","plainDrugs":"","printDrugs":"","tmoTabularDataXml":"","SectionList":"","DoctorFav":false,"doctorID":"701628870","clinicID":"600022878","updatedByName":"Dr. Rajni onco1","updatedById":701628870,"patientID":"701671348","evolkoID":"919132","ptCaseID":"38235","todayVisitedDateTime":"1593420680026","sqlLiteVisitID":"25","doctorName":"Dr. Rajni onco1","clinicName":"Dr. Rajni onco1\'s Clinic","patientName":"test lab 5 nov 1","patientCellPhone":"0000000000","ptAge":" 30Y\\/M","userEmail":"","parentVisitId":0}',
                  },
                ],
                referredByClinicID: 0,
                referredByDoctorID: 0,
                referredToClinicID: 0,
                referredToDoctorID: 0,
              },
            ],
          };
          console.log("final request for save", data);
          console.log("final request for save stringify", JSON.stringify(data));

          axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
          axios
            .put(
              hostAddress +
                currentServer +
                "/RestEasy/PatientWebService/savePatientVisitOnServer",
              data
            )
            .then((response) => {
              localStorage.setItem("patientStatus", "Just Saved");
              console.log("save resp", response.data);
              // generateDischargeSummary(patientId, ptCaseID);

              if (response.data != null) {
                for (let i in response.data["patientVisitDetails"]) {
                  visitId =
                    response.data["patientVisitDetails"][i]["evolkoVisitId"];
                }
              }
              console.log("ptttttttttttId resp", patientId);

              console.log("visitId resp", visitId);

              localStorage.setItem("patientId", patientId);
              localStorage.setItem("visitId", visitId);
              localStorage.setItem("evolkoId", evolkoId);

              setRedirectVar(
                <Redirect
                  to={{
                    pathname: "/dischargeSummaryPage",
                    state: { patient: patient },
                  }}
                />
              );
            })
            .catch((err) => {
              console.log("err", err);
            });
        }
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const handleAddMedicine = () => {
    let mediToAddArr = localStorage.getItem("mediToAddArr");
    mediToAddArr = mediToAddArr == null ? [] : mediToAddArr.split(",");
    let mediToAddSet = new Set();
    for (let item in mediToAddArr) mediToAddSet.add(mediToAddArr[item]);
    for (let item in mediObj) {
      if (mediObj[item]) {
        mediToAddSet.add(item);
      } else if (mediToAddSet.has(item)) {
        mediToAddSet.delete(item);
      }
    }
    mediToAddArr = Array.from(mediToAddSet);
    localStorage.setItem("mediToAddArr", mediToAddArr);
    console.log(mediToAddSet);
    setMediToAddArr(Array.from(mediToAddSet));

    let mediToAddWithBrackArr = localStorage.getItem("mediToAddWithBrackArr");
    mediToAddWithBrackArr =
      mediToAddWithBrackArr == null ? [] : mediToAddWithBrackArr.split(",");
    let mediToAddWithBrackSet = new Set();
    for (let item in mediToAddWithBrackArr)
      mediToAddWithBrackSet.add(mediToAddWithBrackArr[item]);
    for (let item in mediObjWithBrack) {
      if (mediObjWithBrack[item]) {
        mediToAddWithBrackSet.add(item);
      } else if (mediToAddWithBrackSet.has(item)) {
        mediToAddWithBrackSet.delete(item);
      }
    }
    mediToAddWithBrackArr = Array.from(mediToAddWithBrackSet);
    localStorage.setItem("mediToAddWithBrackArr", mediToAddWithBrackArr);
    console.log(mediToAddWithBrackSet);
    setMediToAddWithBrackArr(Array.from(mediToAddWithBrackSet));
  };
  const setChecked = (mediNameWithoutBrack, type) => {
    if (type == "group") {
      let tempObj = {};
      if (localStorage.getItem("grpChecked") != null)
        tempObj = JSON.parse(localStorage.getItem("grpChecked"));
      tempObj[mediNameWithoutBrack] =
        tempObj[mediNameWithoutBrack] == null
          ? true
          : !tempObj[mediNameWithoutBrack];
      setGrpChecked(tempObj);
      localStorage.setItem("grpChecked", JSON.stringify(tempObj));
    } else {
      let tempObj = {};
      if (localStorage.getItem("favChecked") != null)
        tempObj = JSON.parse(localStorage.getItem("favChecked"));
      tempObj[mediNameWithoutBrack] =
        tempObj[mediNameWithoutBrack] == null
          ? true
          : !tempObj[mediNameWithoutBrack];
      setFavChecked(tempObj);

      localStorage.setItem("favChecked", JSON.stringify(tempObj));
    }
  };
  const getSelectedMedFromSearch = (mediName) => {
    console.log(mediName);
    setMedicineName(mediName);
    let data = {
      searchText: mediName,
      from: "0",
      doctorID: "118",
    };
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/elasticSearchWebService/searchMedicinefromES",
        data
      )
      .then((response) => {
        console.log("searchMedicinefromES resp", response.data);
        setMediArr(response.data["hits"]["hits"]);
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const handleFavourites = () => {
    setOnPage("favs");
    let favMedi = null,
      groups = null;
    let favCheckedObj = JSON.parse(localStorage.getItem("favChecked"));
    if (favCheckedObj != null) {
      let favCheckedArr = Object.keys(favCheckedObj);
      console.log("favCheckedArr", favCheckedArr);
      let favChecked = JSON.parse(localStorage.getItem("favChecked"));
      favMedi = favCheckedArr
        .filter((medi) => favCheckedObj[medi])
        .map((medi) => {
          console.log("favs", medi);
          let mediNameWithoutBrack =
            medi.charAt(0) == "(" && medi.charAt(medi.length - 1) == ")"
              ? medi.substring(1, medi.length - 1)
              : medi;
          return (
            <button
              className={[
                mediObj[mediNameWithoutBrack]
                  ? styles.medicineBtnActive
                  : styles.medicineBtn,
                styles.medicineDiv,
              ].join(" ")}
              onClick={() => {
                let tempObj = mediObj;
                console.log(mediObj);
                tempObj[mediNameWithoutBrack] =
                  tempObj[mediNameWithoutBrack] == null ||
                  !tempObj[mediNameWithoutBrack]
                    ? true
                    : false;
                let tempObjWithBrack = mediObjWithBrack;
                console.log(mediObjWithBrack);
                tempObjWithBrack[medi] =
                  tempObjWithBrack[medi] == null || !tempObjWithBrack[medi]
                    ? true
                    : false;
                setMediObj(tempObj);
                setMediObjWithBrack(tempObjWithBrack);
                localStorage.setItem("mediObj", JSON.stringify(mediObj));
                localStorage.setItem(
                  "mediObjWithBrack",
                  JSON.stringify(mediObjWithBrack)
                );
                console.log(mediObj);
                setPrompt(Math.random());
                handleAddMedicine();
              }}
            >
              <div className={styles.medicineName}>
                <div>{mediNameWithoutBrack}</div>
                <div>
                  <span
                    className={[
                      !favChecked[medi] ? classes.starUnc : classes.starCh,
                      "fa fa-star",
                    ].join(" ")}
                    onClick={() => {
                      mediObj[mediNameWithoutBrack] = !mediObj[
                        mediNameWithoutBrack
                      ];
                      setChecked(mediNameWithoutBrack);
                    }}
                  ></span>
                </div>
              </div>
            </button>
          );
        });
    }
    let grpObj = JSON.parse(localStorage.getItem("grpObj"));
    groups = null;
    if (grpObj != null) {
      let grpSel =
        JSON.parse(localStorage.getItem("grpSel")) == null
          ? {}
          : JSON.parse(localStorage.getItem("grpSel"));
      let grpArr = Object.keys(grpObj);
      console.log("grpArr", grpArr);
      groups = grpArr.map((grp) => {
        console.log("grp", grp);
        return (
          <button
            className={[
              grpSel[grp] ? styles.medicineBtnActive : styles.medicineBtn,
              styles.medicineDiv,
            ].join(" ")}
            onClick={() => {
              let tempObj = mediObj;
              console.log(mediObj);
              let grpArr = [],
                grpObj = JSON.parse(localStorage.getItem("grpObj"));
              if (grpObj != null) grpArr = grpObj[grp];
              for (let i in grpArr) {
                let medi = grpArr[i];

                // let associatedGrp=JSON.parse(localStorage.getItem('associatedGrp'))
                // if(tempObj[medi] && associatedGrp[medi]!=null){
                //   let tempArr=associatedGrp[medi].filter((item)=>item!=grp)
                //   localStorage.setItem('associatedGrp',tempArr)
                //   if(tempArr.length==0){
                //     tempObj[medi] =
                //     tempObj[medi] == null || !tempObj[medi] ? true : false;
                //   let tempObjWithBrack = mediObjWithBrack;
                //   console.log(mediObjWithBrack);
                //   tempObjWithBrack[medi] =
                //     tempObjWithBrack[medi] == null || !tempObjWithBrack[medi]
                //       ? true
                //       : false;
                //   setMediObj(tempObj);
                //   setMediObjWithBrack(tempObjWithBrack);
                //   }
                // }
                // else if(!tempObj[medi] && associatedGrp[medi]!=null){

                // }
                tempObj[medi] =
                  tempObj[medi] == null || !tempObj[medi] ? true : false;
                let tempObjWithBrack = mediObjWithBrack;
                console.log(mediObjWithBrack);
                tempObjWithBrack[medi] =
                  tempObjWithBrack[medi] == null || !tempObjWithBrack[medi]
                    ? true
                    : false;
                setMediObj(tempObj);
                setMediObjWithBrack(tempObjWithBrack);
              }
              let grpTempObj = grpSel;
              console.log("grpTempObj1", grpTempObj);

              grpTempObj[grp] =
                grpTempObj[grp] == null || !grpTempObj[grp] ? true : false;
              setGrpSel(grpTempObj);
              console.log("grpTempObj", grpTempObj);
              localStorage.setItem("grpSel", JSON.stringify(grpTempObj));
              localStorage.setItem("mediObj", JSON.stringify(mediObj));
              localStorage.setItem(
                "mediObjWithBrack",
                JSON.stringify(mediObjWithBrack)
              );
              console.log(mediObj);
              setPrompt(Math.random());
            }}
          >
            <div className={styles.medicineName}>
              <div>{grp}</div>
              <div>
                <span
                  className={[
                    !JSON.parse(localStorage.getItem("grpChecked"))[grp]
                      ? classes.starUnc
                      : classes.starCh,
                    "fa fa-star",
                  ].join(" ")}
                  onClick={() => {
                    mediObj[grp] = !mediObj[grp];
                    setChecked(grp, "group");
                  }}
                ></span>
              </div>
            </div>
          </button>
        );
      });
    }

    let favObj = (
      <div className={classes.favDiv}>
        {favMedi}
        <div className={classes.grpHeader}>Here are your groups</div>
        {groups}
        {/* <Button
          variant="success"
          className={classes.addBtn}
          onClick={() => {
            setLeftContent(favObj);
            handleAddMedicine();
          }}
        >
          Add
        </Button> */}
      </div>
    );
    setLeftContent(favObj);
  };
  const handleSelect = () => {
    setOnPage("select");
    let selectedMedi = null;
    let mediObj = JSON.parse(localStorage.getItem("mediObj"));
    if (mediObj != null) {
      let selectedArr = Object.keys(mediObj);
      console.log("selectedArr", selectedArr);
      selectedMedi = selectedArr
        .filter((medi) => mediObj[medi])
        .map((medi) => {
          console.log("selects", medi);
          return (
            <button
              className={[
                mediObj[medi] ? styles.medicineBtnActive : styles.medicineBtn,
                styles.medicineDiv,
              ].join(" ")}
              onClick={() => {
                let tempObj = mediObj;
                console.log(mediObj);
                tempObj[medi] =
                  tempObj[medi] == null || !tempObj[medi] ? true : false;
                let tempObjWithBrack = mediObjWithBrack;
                console.log(mediObjWithBrack);
                tempObjWithBrack[medi] =
                  tempObjWithBrack[medi] == null || !tempObjWithBrack[medi]
                    ? true
                    : false;
                setMediObj(tempObj);
                setMediObjWithBrack(tempObjWithBrack);
                localStorage.setItem("mediObj", JSON.stringify(mediObj));
                localStorage.setItem(
                  "mediObjWithBrack",
                  JSON.stringify(mediObjWithBrack)
                );
                console.log(mediObj);
                setPrompt(Math.random());
              }}
            >
              <div className={styles.medicineName}>
                <div>{medi}</div>
                <div>
                  <span
                    className={[
                      !favChecked[medi] ? classes.starUnc : classes.starCh,
                      "fa fa-star",
                    ].join(" ")}
                    onClick={() => {
                      mediObj[medi] = !mediObj[medi];
                      setChecked(medi);
                    }}
                  ></span>
                </div>
              </div>
            </button>
          );
        });
    }
    let selObj = (
      <div className={classes.favDiv}>
        {selectedMedi}
        <MakeMediGrpModal
          handleFavourites={handleFavourites}
          setChecked={setChecked}
          setBtnHeaderStyleObj={setBtnHeaderStyleObj}
          handleAddMedicine={handleAddMedicine}
        ></MakeMediGrpModal>
      </div>
    );
    setLeftContent(selObj);
  };
  const handleUploadBtn = () => {
    setLeftPaneLabel("Uploads");
    setLeftPaneSansMedicine(
      <DSCreateLeftPaneUploads
        setRedirect={setRedirect}
        getSelectedMedFromSearch={getSelectedMedFromSearch}
        setLeftContent={setLeftContent}
        btnHeaderStyleObj={btnHeaderStyleObj}
        setBtnHeaderStyleObj={setBtnHeaderStyleObj}
        setOnPage={setOnPage}
        setPrompt={setPrompt}
        handleFavourites={handleFavourites}
        handleSelect={handleSelect}
        leftContent={leftContent}
      />
    );
  };
  useEffect(() => {
    let i = -1;
    console.log("--in useeffect of dscreate", mediArr);
    let leftMedi = (
      <div className={classes.mediLeftContentInnerDiv}>
        {" "}
        {mediArr.map((item) => {
          console.log("=>", item["_source"]["generic_name"], "-", medicineName);
          if (item["_source"]["generic_name"] != null)
            if (
              item["_source"]["generic_name"] != null &&
              item["_source"]["generic_name"] == medicineName &&
              !mediSet.has(
                item["_source"]["pkg_code"] +
                  " " +
                  String(item["_source"]["generic_qty_uom"]).substring(
                    1,
                    String(item["_source"]["generic_qty_uom"]).length - 1
                  )
              )
            ) {
              let mediNameWithoutBrack =
                String(item["_source"]["generic_qty_uom"]).charAt(0) == "(" &&
                String(item["_source"]["generic_qty_uom"]).charAt(
                  String(item["_source"]["generic_qty_uom"]).length - 1
                ) == ")"
                  ? String(item["_source"]["generic_qty_uom"]).substring(
                      1,
                      String(item["_source"]["generic_qty_uom"]).length - 1
                    )
                  : String(item["_source"]["generic_qty_uom"]);
              if (
                mediNameWithoutBrack != "null" &&
                mediNameWithoutBrack != "" &&
                mediNameWithoutBrack != null
              ) {
                mediNameWithoutBrack =
                  item["_source"]["pkg_code"] + " " + mediNameWithoutBrack;
                mediSet.add(mediNameWithoutBrack);
                mediNameWithBrackSet.add(item["_source"]["generic_qty_uom"]);
              }
              i++;
              console.log("set", mediSet);
              if (mediNameWithoutBrack == "null") return;
              else
                return (
                  <button
                    className={[
                      mediObj[mediNameWithoutBrack]
                        ? styles.medicineBtnActive
                        : styles.medicineBtn,
                      styles.medicineDiv,
                    ].join(" ")}
                    onClick={() => {
                      let tempObj = mediObj;
                      console.log(mediObj);
                      tempObj[mediNameWithoutBrack] =
                        tempObj[mediNameWithoutBrack] == null ||
                        !tempObj[mediNameWithoutBrack]
                          ? true
                          : false;
                      let tempObjWithBrack = mediObjWithBrack;
                      console.log(mediObjWithBrack);
                      tempObjWithBrack[item["_source"]["generic_qty_uom"]] =
                        tempObjWithBrack[item["_source"]["generic_qty_uom"]] ==
                          null ||
                        !tempObjWithBrack[item["_source"]["generic_qty_uom"]]
                          ? true
                          : false;
                      setMediObj(tempObj);
                      setMediObjWithBrack(tempObjWithBrack);
                      console.log("mediObj", mediObj);
                      console.log("mediObjWithBrack", mediObjWithBrack);
                      localStorage.setItem("mediObj", JSON.stringify(mediObj));
                      localStorage.setItem(
                        "mediObjWithBrack",
                        JSON.stringify(mediObjWithBrack)
                      );
                      setPrompt(Math.random());
                      handleAddMedicine();
                    }}
                  >
                    <div className={styles.medicineName}>
                      <div>{mediNameWithoutBrack}</div>
                      <div>
                        <span
                          className={[
                            !favChecked[mediNameWithoutBrack]
                              ? classes.starUnc
                              : classes.starCh,
                            "fa fa-star",
                          ].join(" ")}
                          onClick={() => {
                            mediObj[mediNameWithoutBrack] = !mediObj[
                              mediNameWithoutBrack
                            ];
                            setChecked(mediNameWithoutBrack);
                          }}
                        ></span>
                      </div>
                    </div>
                  </button>
                );
            }
        })}
        {/* <Button
          variant="success"
          className={classes.addBtn}
          onClick={() => {
            handleAddMedicine();
          }}
        >
          Add
        </Button> */}
      </div>
    );
    if (onPage == "home") {
      setLeftContentMedi(leftMedi);
      setLeftContent(leftMedi);
    } else if (onPage == "favs") {
      handleFavourites();
    } else if (onPage == "select") {
      handleSelect();
    }
  }, [mediArr, medicineName, prompt]); //for getting the home list on the left pane for medicines

  return (
    <div className={classes.mainContainer}>
      {!localStorage.getItem("email") || patient == null ? (
        <Redirect to="/dischargeSummary" />
      ) : null}
      {redirectVar}
      {redirect}
      <div className={classes.leftPaneCreatePage}>
        {leftPaneLabel == "Medicines" ? (
          <DSCreateLeftPaneMedicines
            setRedirect={setRedirect}
            getSelectedMedFromSearch={getSelectedMedFromSearch}
            setLeftContent={setLeftContent}
            btnHeaderStyleObj={btnHeaderStyleObj}
            setBtnHeaderStyleObj={setBtnHeaderStyleObj}
            setOnPage={setOnPage}
            setPrompt={setPrompt}
            handleFavourites={handleFavourites}
            handleSelect={handleSelect}
            leftContent={leftContent}
          />
        ) : (
          leftPaneSansMedicine
        )}
      </div>
      <div className={classes.rightPaneCreatePage}>
        <div className={styles.mainDischargeSummaryForNew}>
          <div className={styles.rightTopFixed}>
            <div className={styles.rightTop}>
              {/* <div className={styles.rightTopLeft}> */}
              {/* <div className={styles.nameDischargeSummaryForNew}>
                  {patient["name"]}
                </div> */}
              <div className={styles.patientNameHeadingBox}>
                <div className={styles.patientHeaderImage}>
                  <i class="fa fa-user-circle fa-lg"></i>
                </div>
                <div className={styles.patientNameHeadingName}>
                  {patient == null ? "" : patient["name"]},
                </div>
                <div className={styles.patientNameHeadingAge}>
                  {" "}
                  {patient == null ? "" : patient["age"]} /{" "}
                  {patient == null
                    ? ""
                    : patient["sex"] == "" || patient["sex"] == null
                    ? ""
                    : patient["sex"].substring(0, 1)}
                </div>
              </div>
              {/* </div> */}

              <div className={styles.rightTopRight}>
                <div className={styles.saveBtnDiv}>
                  <div>
                    <Button
                      className={styles.saveBtn}
                      onClick={() => {
                        setLoader(
                          <Spinner
                            animation="border"
                            size="md"
                            variant="success"
                          />
                        );
                        setSave();
                      }}
                    >
                      Save
                    </Button>
                  </div>
                  <HamburgerDropdown></HamburgerDropdown>
                  <div className={styles.saveLoader}>{loader}</div>
                </div>
              </div>
            </div>
            {/* <div
              className={styles.createPageBarActivePatientInfo}
              value="Patient Information"
            >
              <DraggableSectionHeading label="Patient Information" />
              <PatientInformation
                setPrompt={setPrompt}
                dateOfDischarge={dateOfDischarge}
                setDateOfDischarge={setDateOfDischarge}
                dateOfAdmission={dateOfAdmission}
                setDateOfAdmission={setDateOfAdmission}
              ></PatientInformation>
            </div> */}
            {/* <hr className={styles.hrline} /> */}
          </div>
          <div className={styles.rightPaneDiv}>
            <DischargeSummaryRightPane
              setLeftContent={setLeftContent}
              mediToAddArr={mediToAddArr}
              handleFavourites={handleFavourites}
              onPage={onPage}
              setMediArr={setMediArr}
              setMediToAddArr={setMediToAddArr}
              setMediObj={setMediObj}
              setMediObjWithBrack={setMediObjWithBrack}
              mediObjWithBrack={mediObjWithBrack}
              mediObj={mediObj}
              setPrompt={setPrompt}
              setLeftPrompt={setLeftPrompt}
              setLeftPaneLabel={setLeftPaneLabel}
              dateOfDischarge={dateOfDischarge}
              setDateOfDischarge={setDateOfDischarge}
              dateOfAdmission={dateOfAdmission}
              setDateOfAdmission={setDateOfAdmission}
              setCreateDsStateChange={setCreateDsStateChange}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default DischargeSummaryCreate;

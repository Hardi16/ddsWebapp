import React, { useState, useEffect } from "react";
import { Card, Dropdown, Button } from "react-bootstrap";
import classes from "./Styles.module.css";
import { Redirect } from "react-router";
import { hostAddress } from "../assets/config";
import { currentServer } from "../assets/config";
import axios from "axios";
import html2pdf from "html2pdf.js";
import _ from "lodash";

const PullPatientDischargeInfo = (props) => {
  const [redirect, setRedirect] = useState(null);
  const [visits, setVisists] = useState(null);
  const [stateVal, setStateVal] = useState("DRAFT");
  const [dispObj, setDispObj] = useState();
  const [patientDispObj, setPatientDispObj] = useState();
  const [thumbnails, setThumbnails] = useState(null);
  const [linkToCreatePg, setLinkToCreatePage] = useState(
    props.approved_status != 4 ? (
      <Button
        onClick={() => {
          localStorage.setItem("patient", JSON.stringify(props.patient));
          setRedirect(
            <Redirect
              to={{
                pathname: "/dischargeSummaryCreate",
                state: {
                  patient: props.patient,
                },
              }}
            />
          );
        }}
      >
        Edit
      </Button>
    ) : (
      <Button disabled>Edit</Button>
    )
  );

  console.log("props.summaryDataArr", props.summaryDataArr);
  let ds = props.summaryDataArr;
  let medicines = null;

  // useEffect(() => {
  //   if (props.summaryDataArr.stateFlag == "0") {
  //     setStateVal("DRAFT");
  //     setLinkToCreatePage(
  //       <a
  //         href=""
  //         onClick={() => {
  //           localStorage.setItem("patient", JSON.stringify(props.patient));
  //           setRedirect(
  //             <Redirect
  //               to={{
  //                 pathname: "/dischargeSummaryCreate",
  //                 state: {
  //                   patient: props.patient,
  //                 },
  //               }}
  //             />
  //           );
  //         }}
  //       >
  //         Edit Discharge Summary
  //       </a>
  //     );
  //   } else if (props.summaryDataArr.stateFlag == "1") {
  //     setStateVal("PENDING APPROVAL");
  //     setLinkToCreatePage(
  //       <a
  //         href=""
  //         onClick={() => {
  //           localStorage.setItem("patient", JSON.stringify(props.patient));
  //           setRedirect(
  //             <Redirect
  //               to={{
  //                 pathname: "/dischargeSummaryCreate",
  //                 state: {
  //                   patient: props.patient,
  //                 },
  //               }}
  //             />
  //           );
  //         }}
  //       >
  //         Edit Discharge Summary
  //       </a>
  //     );
  //   } else if (props.summaryDataArr.stateFlag == "2") {
  //     setStateVal("APPROVED/SCHEDULED");
  //     setLinkToCreatePage(null);
  //   } else if (props.summaryDataArr.stateFlag == "3") {
  //     setStateVal("DISCHARGED");
  //     setLinkToCreatePage(null);
  //   }
  //   let dataFetch = {
  //     pId: props.patient["id"],
  //     docId: localStorage.getItem("doctorId"),
  //     caseId: props.patient["ptcaseId"],
  //     clinicId: localStorage.getItem("clinicId"),
  //   };
  //   console.log("findPatientVisits dataFetch", dataFetch);
  //   axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
  //   axios
  //     .put(
  //       hostAddress + currentServer +
  //         "/RestEasy/DischargeSummaryWebService/findPatientVisits",
  //       dataFetch
  //     )
  //     .then((response) => {
  //       console.log("findPatientVisits response", response.data);
  //       let visitArr =
  //         response.data["ptAppointmentOrgList"] == null
  //           ? []
  //           : response.data["ptAppointmentOrgList"];
  //       setVisists(
  //         visitArr.map((item) => {
  //           return (
  //             <Button variant="success" className={classes.visitBtn}>
  //               {item["visited_on"]}
  //             </Button>
  //           );
  //         })
  //       );
  //     })
  //     .catch((err) => console.log("err", err));
  // }, [props.patient["id"]]);
  // if (ds["adviseRx"] != null && "Lbl" in ds["adviseRx"]) {
  //   medicines = (
  //     <div>
  //       <br />
  //       <div>{ds["adviseRx"]["Lbl"]["_cdata"]}</div>
  //       <div>{ds["adviseRx"]["details"]["_cdata"]}</div>
  //     </div>
  //   );
  // } else if (ds["adviseRx"] != null || ds["adviseRx"] != "") {
  //   medicines = ds["adviseRx"].map((item) => {
  //     return (
  //       <div>
  //         <br />
  //         <div>{item["Lbl"]["_cdata"]}</div>
  //         <div>{item["details"]["_cdata"]}</div>
  //       </div>
  //     );
  //   });
  // }
  const handleDischarge = () => {
    let data = {
      approvedStatus: 4,
      approvedById: localStorage.getItem("userId"),
      visitId: localStorage.getItem("visitId"),
    };
    console.log("generateDischargeSummary data", data);
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/DischargeSummaryWebService/updatedDischargeSummaryApprovedStatus",
        data
      )
      .then((response) => {
        console.log("generateDischargeData resp", response.data);
        // alert();
        let data = {
          approvedStatus: 4,
          approvedById: localStorage.getItem("userId"),
          visitId: localStorage.getItem("visitId"),
          roleId: 1,
          clinicId: localStorage.getItem("clinicId"),
          doctorID: localStorage.getItem("doctorId"),
          patientId:
            JSON.parse(localStorage.getItem("patient")) == null
              ? 0
              : JSON.parse(localStorage.getItem("patient"))["id"],
        };
        console.log("generateDischargeSummary sms data", data);
        axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
        axios
          .put(
            hostAddress +
              currentServer +
              "/RestEasy/DischargeSummaryWebService/updatedDischargeSummaryApprovedStatus",
            data
          )
          .then((response) => {
            setStateVal("DISCHARGED");
            setLinkToCreatePage();
          })
          .catch((err) => {
            console.log("err", err);
          });
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const handleApproveScheduled = () => {
    let data = {
      approvedStatus: 3,
      approvedById: localStorage.getItem("userId"),
      visitId: localStorage.getItem("visitId"),
    };
    console.log("generateDischargeSummary data", data);
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/DischargeSummaryWebService/updatedDischargeSummaryApprovedStatus",
        data
      )
      .then((response) => {
        console.log("generateDischargeData resp", response.data);
        setStateVal("APPROVED/SCHEDULED");
        setLinkToCreatePage();
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const handleSelfApprove = () => {
    let data = {
      approvedStatus: 2,
      approvedById: localStorage.getItem("userId"),
      visitId: localStorage.getItem("visitId"),
    };
    console.log("generateDischargeSummary data", data);
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/DischargeSummaryWebService/updatedDischargeSummaryApprovedStatus",
        data
      )
      .then((response) => {
        console.log(
          "updatedDischargeSummaryApprovedStatus resp",
          response.data
        );
        setStateVal("APPROVED");
        setLinkToCreatePage();
        // <a
        //   className={classes.disabledLink}
        //   href=""
        //   onClick={() => {
        //     setRedirect(
        //       <Redirect
        //         to={{
        //           pathname: "/dischargeSummaryCreate",
        //           state: {
        //             patient: props.patient,
        //           },
        //         }}
        //       />
        //     );
        //   }}
        // >
        //   Edit Discharge Summary
        // </a>
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const handleDataOpApprove = () => {
    let data = {
      patientId: props.patient["id"],
      caseId: props.patient["ptcaseId"],
      finalizeFlag: 2,
    };
    console.log("generateDischargeSummary data", data);
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/DischargeSummaryWebService/generateDischargeData",
        data
      )
      .then((response) => {
        console.log("generateDischargeData resp", response.data);
        setStateVal("APPROVED/SCHEDULED");
        setLinkToCreatePage();
        // <a
        //   className={classes.disabledLink}
        //   href=""
        //   onClick={() => {
        //     setRedirect(
        //       <Redirect
        //         to={{
        //           pathname: "/dischargeSummaryCreate",
        //           state: {
        //             patient: props.patient,
        //           },
        //         }}
        //       />
        //     );
        //   }}
        // >
        //   Edit Discharge Summary
        // </a>
      })
      .catch((err) => {
        console.log("err", err);
      });
  };
  const handleGeneratePdf = () => {
    let element = document.getElementById("divToPrint");
    var opt = {
      margin: 1,
      filename: "myfile.pdf",
      image: { type: "jpeg", quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
    };
    html2pdf()
      .set(opt)
      .from(element)
      .toPdf()
      .get("pdf")
      .then(function (pdf) {
        window.open(pdf.output("bloburl"), "_blank");
      });
  };
  const handleThumbnailClick = (dataId) => {
    let data = {
      original_image_id: dataId,
    };
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/multimediaServices/downLoadOriginalImage",
        data
      )
      .then((response) => {
        console.log("downLoadOriginalImage resp", response.data);
      })
      .catch((err) => console.log("err", err));
  };
  useEffect(() => {
    // alert();
    if (props.approved_status == 0) setStateVal("DRAFT");
    else if (props.approved_status == 1) setStateVal("PENDING APPROVAL");
    else if (props.approved_status == 2) setStateVal("APPROVED");
    else if (props.approved_status == 3) setStateVal("APPROVED/SCHEDULED");
    else if (props.approved_status == 4) setStateVal("DISCHARGED");
  }, [props.approved_status]);
  useEffect(() => {
    let data = {
      patientMultiMediaDetails: [
        {
          checked: false,
          clinicID: localStorage.getItem("clinicId"),
          deviceTimeUTC: Math.floor(new Date().getTime() / 1000),
          doctorID: localStorage.getItem("doctorId"),
          downloaded: false,
          lastSyncTimeFromServer: 1595855120049,
          patientID:
            localStorage.getItem("patient") == null
              ? 0
              : JSON.parse(localStorage.getItem("patient"))["id"],
          patientMaxInvestigationID: 63080,
          ptCaseID:
            localStorage.getItem("patient") == null
              ? 0
              : JSON.parse(localStorage.getItem("patient"))["ptcaseId"],
          ptInvestigationSubList: [],
          referredByClinicID: 0,
          referredByDoctorID: 0,
          referredToClinicID: 0,
          referredToDoctorID: 0,
          selected: false,
        },
      ],
      upload_feature_flag: true,
    };
    axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    axios
      .put(
        hostAddress +
          currentServer +
          "/RestEasy/multimediaServices/saveMultiMediathroughSynFramework",
        data
      )
      .then((response) => {
        console.log("saveMultiMediathroughSynFramework res", response.data);
        let thumbArr = response.data["patientVisitDetails"];
        setThumbnails(
          thumbArr.map((item) => {
            let thumbNailImageInByteFormat = item["thumbNailImageInByteFormat"];
            if (thumbNailImageInByteFormat != null) {
              let base64String = btoa(
                String.fromCharCode(
                  ...new Uint8Array(thumbNailImageInByteFormat)
                )
              );
              let src = "data:image/*;base64," + base64String;
              let dataId = item["thumbnailDataId"];
              return (
                <img
                  className={classes.thumbnailImg}
                  src={src}
                  onClick={(dataId) => handleThumbnailClick(dataId)}
                ></img>
              );
            }
          })
        );
      })
      .catch((err) => console.log("err", err));
  }, []);
  useEffect(() => {
    let displayJson = props.displayJson;
    console.log("displayJson", displayJson);

    if (localStorage.getItem("patientStatus") === "Just Saved") {
      let obj = JSON.parse(localStorage.getItem("patientInformationObj"));
      let arr = [];
      for (let objitem in obj) {
        let key = objitem;
        let val = obj[key];
        if (key == "idpNo" || key == "mrnNo" || key == "roomNo")
          key = _.upperCase(key);
        arr.push(key + "-" + val);
      }
      let subfields = arr.map((subItem) => {
        return <div>{subItem}</div>;
      });
      setPatientDispObj(
        <Card.Body>
          <div>
            <span className={classes.temptitle}>Patient Information</span>
            <div>{subfields}</div>
          </div>
        </Card.Body>
      );

      let cardsLabel =
        localStorage.getItem("cardsLabel") == null
          ? []
          : JSON.parse(localStorage.getItem("cardsLabel"));
      setDispObj(
        cardsLabel.map((item) => {
          // console.log("itemm", item);
          if (
            item != "Course Label" &&
            item != "Instructions Label" &&
            item != "Patient Information"
          ) {
            let camelCaseName = _.camelCase(item);
            let camelCaseNameWObj = _.camelCase(camelCaseName + "Obj");

            let withoutObj = [
              "Chief Complaint",
              // "History of Present Illness",
              "Menstrual/Obstetric History",
              "Diagnosis On Discharge",
              "Findings",
              "Lab tests",
              "Complications",
              "Treatment Given",
              "Vitals at Discharge",
              "Advised Investigations",
              "Plans for Medical Follow-up",
              "Attached Images",
              "Advice on Discharge",
              "HealthRADAR Monitoring (Duration, Condition)",
            ];
            let signObjects = ["Doctor's Signature", "Patient's Signature"];
            let spCase = [
              "Medications at Discharge",
              "Diagnosis On Admission",
              "Advised Investigations",
              "Physical Exam on Admission",
              "History of Present Illness & Obs Profile",
            ];
            let checkboxCase = ["Allergies", "Condition at Discharge"];
            let dietAndOtherCardsCase = [
              "Dietary Instructions",
              "Therapy Orders",
              "Activity Orders",
              "Condition at Discharge",
              "Disposition To",
            ];
            if (item == "Physical Exam on Admission") {
              let obj =
                JSON.parse(
                  localStorage.getItem("physicalExamOnAdmissionObj")
                ) == null
                  ? {}
                  : JSON.parse(
                      localStorage.getItem("physicalExamOnAdmissionObj")
                    );
              let grpArr = [];
              for (let i in obj) {
                //i gen phy exam
                let jarr = [];
                for (let j in obj[i]) {
                  // j skin
                  let kval = [];
                  for (let k in obj[i][j]) {
                    //k clinically
                    let lval = "";
                    for (let l in obj[i][j][k]) {
                      //l NAD
                      if (obj[i][j][k][l]) lval = i;
                    }
                    if (lval != "") kval.push(k + "-" + lval);
                  }
                  jarr.push({ _name: j, _description: kval.toString() });
                }
                grpArr.push({ displayText: i, groupedDetails: jarr });
              }
              // saveObj["groupedDetails"] = grpArr;
              // console.log("groupedDetails phy exam", saveObj["groupedDetails"]);
              let grpArrContent = grpArr.map((item) => {
                return (
                  <>
                    <h5>{item["displayText"]}</h5>
                    <div>
                      {item["groupedDetails"].map((ele) => {
                        return (
                          <>
                            <h6>{ele["_name"]}</h6>
                            <div>{ele["_description"]}</div>
                          </>
                        );
                      })}
                    </div>
                  </>
                );
              });
              return (
                <Card.Body>
                  <div>
                    <span className={classes.temptitle}> {item}</span>
                    {grpArrContent}
                  </div>
                </Card.Body>
              );
            }
            if (item == "History of Present Illness & Obs Profile") {
              let obj =
                JSON.parse(
                  localStorage.getItem("historyOfPresentIllnessObj")
                ) == null
                  ? {}
                  : JSON.parse(
                      localStorage.getItem("historyOfPresentIllnessObj")
                    );
              let grpArr = [];
              for (let i in obj) {
                //i gen phy exam
                let jarr = [];
                for (let j in obj[i]) {
                  // j skin
                  let kval = obj[i][j];
                  jarr.push({ _name: j, _description: kval.toString() });
                }
                grpArr.push({ displayText: i, groupedDetails: jarr });
              }
              // saveObj["groupedDetails"] = grpArr;
              // console.log("groupedDetails phy exam", saveObj["groupedDetails"]);
              let grpArrContent = grpArr.map((item) => {
                return (
                  <>
                    <h5>{item["displayText"]}</h5>
                    <div>
                      {item["groupedDetails"].map((ele) => {
                        return (
                          <>
                            <h6>{ele["_name"]}</h6>
                            <div>{ele["_description"]}</div>
                          </>
                        );
                      })}
                    </div>
                  </>
                );
              });
              return (
                <Card.Body>
                  <div>
                    <span className={classes.temptitle}> {item}</span>
                    {grpArrContent}
                  </div>
                </Card.Body>
              );
            }
            if (item == "Diagnosis On Admission") {
              let arr =
                localStorage.getItem("diagnosisContent") == null
                  ? []
                  : JSON.parse(localStorage.getItem("diagnosisContent"));
              if (arr.length > 0) {
                let subfields = arr.map((i) => {
                  return <div>{i}</div>;
                });
                return (
                  <Card.Body>
                    <div>
                      <span className={classes.temptitle}> {item}</span>
                      {subfields}
                      {localStorage.getItem("diagnosisOnAdmission") != null
                        ? ", " + localStorage.getItem("diagnosisOnAdmission")
                        : ""}
                    </div>
                  </Card.Body>
                );
              }
            }
            if (item == "Advised Investigations") {
              let arr =
                localStorage.getItem("investigationContent") == null
                  ? []
                  : JSON.parse(localStorage.getItem("investigationContent"));
              if (arr.length > 0) {
                let subfields = arr.map((i) => {
                  return <div>{i}</div>;
                });
                return (
                  <Card.Body>
                    <div>
                      <span className={classes.temptitle}> {item}</span>
                      {subfields}
                      {localStorage.getItem("advisedInvestigations") != null
                        ? ", " + localStorage.getItem("advisedInvestigations")
                        : ""}
                    </div>
                  </Card.Body>
                );
              }
            }
            if (item == "Medications at Discharge") {
              let obj1 =
                localStorage.getItem("mediObj") == null
                  ? {}
                  : JSON.parse(localStorage.getItem("mediObj"));
              let arr1 = Object.keys(obj1);
              let obj2 =
                localStorage.getItem("allMedicineDeets") == null ||
                Object.keys(
                  JSON.parse(localStorage.getItem("allMedicineDeets"))
                ).length === 0
                  ? null
                  : JSON.parse(localStorage.getItem("allMedicineDeets"));
              let mediNotes =
                localStorage.getItem("medicationsAtDischargeNotes") == null
                  ? ""
                  : ", " + localStorage.getItem("medicationsAtDischargeNotes");

              arr1.push(mediNotes);
              if (obj2 == null || obj2 == undefined) {
                if (arr1.length > 0 && arr1[0] != "") {
                  let subfields = arr1.map((i) => {
                    if (
                      obj1[i] ||
                      (arr1.indexOf(i) === arr1.length - 1 &&
                        localStorage.getItem("medicationsAtDischargeNotes") !=
                          null)
                    )
                      return <div>{i}</div>;
                  });
                  if (subfields != null) {
                    return (
                      <Card.Body>
                        <div>
                          <span className={classes.temptitle}> {item}</span>
                          {subfields}
                        </div>
                      </Card.Body>
                    );
                  }
                }
              } else {
                let arr2 = [];
                let brandVal =
                  localStorage.getItem("brandValue") == null
                    ? null
                    : JSON.parse(localStorage.getItem("brandValue"));
                let freqVal =
                  localStorage.getItem("freqValObj") == null
                    ? null
                    : JSON.parse(localStorage.getItem("freqValObj"));
                for (let i in obj2) {
                  let bval = "";
                  if (brandVal != null) bval = brandVal[i];
                  bval =
                    bval == "" || bval == undefined
                      ? (bval = "")
                      : ", of Brand: " + bval;
                  let fval = "";
                  if (freqVal != null) fval = freqVal[i];
                  fval =
                    fval == "" || fval == undefined
                      ? (fval = "")
                      : ", with Frequency: " + fval;
                  arr2.push(
                    i + ": " + Object.values(obj2[i]).toString() + bval + fval
                  );
                  console.log("emptymeds-", obj1[i]);
                }
                for (let j in obj1) {
                  if (obj1[j] && !(j in obj2)) arr2.push(j);
                }
                arr2.push(mediNotes);
                if (arr2.length > 0) {
                  let subfields = arr2.map((i) => {
                    return <div>{i}</div>;
                  });
                  if (subfields != null)
                    return (
                      <Card.Body>
                        <div>
                          <span className={classes.temptitle}> {item}</span>
                          {subfields}
                        </div>
                      </Card.Body>
                    );
                }
              }
            }

            if (
              withoutObj.includes(item) &&
              !(
                localStorage.getItem(camelCaseName) == null &&
                item != "Doctor's Signature" &&
                item != "Patient's Signature"
              )
            ) {
              return (
                <Card.Body>
                  <div>
                    <span className={classes.temptitle}> {item}</span>
                    <div>{localStorage.getItem(camelCaseName)}</div>
                  </div>
                </Card.Body>
              );
            } else if (
              !withoutObj.includes(item) &&
              !spCase.includes(item) &&
              !checkboxCase.includes(item) &&
              !dietAndOtherCardsCase.includes(item) &&
              !signObjects.includes(item)
            ) {
              let obj = JSON.parse(localStorage.getItem(camelCaseNameWObj));
              if (obj == null && localStorage.getItem(camelCaseName) != null)
                return (
                  <Card.Body>
                    <div>
                      <span className={classes.temptitle}> {item}</span>
                      <div>{localStorage.getItem(camelCaseName)}</div>
                    </div>
                  </Card.Body>
                );
              console.log("obj", obj);
              let arr = [];
              for (let objitem in obj) {
                let key = objitem;
                let val = obj[key];
                if (typeof val === "object" && val !== null) {
                  val = val[Object.keys(val)[0]] ? Object.keys(val)[0] : "";
                  if (val != "") {
                    arr.push(key + "-" + val);
                  }
                } else if (val == true || val == false) arr.push(key);
                else arr.push(key + "-" + val);
              }
              if (arr.length > 0) {
                let subfields = arr.map((subItem) => {
                  return <div>{subItem}</div>;
                });
                return (
                  <Card.Body>
                    <div>
                      <span className={classes.temptitle}> {item}</span>
                      <div>{subfields}</div>
                    </div>
                  </Card.Body>
                );
              }
            } else if (!spCase.includes(item) && checkboxCase.includes(item)) {
              let obj = JSON.parse(localStorage.getItem(camelCaseNameWObj));
              let arr = [];
              for (let objitem in obj) {
                let key = objitem;
                let val = obj[key];
                if (val == true) arr.push(key);
              }
              if (arr.length > 0) {
                let subfields = arr.map((subItem) => {
                  return <div>{subItem}</div>;
                });
                return (
                  <Card.Body>
                    <div>
                      <span className={classes.temptitle}> {item}</span>
                      {subfields}
                    </div>
                  </Card.Body>
                );
              }
            } else if (
              !spCase.includes(item) &&
              dietAndOtherCardsCase.includes(item)
            ) {
              let obj = JSON.parse(localStorage.getItem(camelCaseName));
              let arr = [];
              for (let objitem in obj) {
                let key = objitem;
                let val = obj[key];
                if (val == true) arr.push(key);
              }

              if (arr.length > 0) {
                let subfields = arr.map((subItem) => {
                  return <div>{subItem}</div>;
                });
                return (
                  <Card.Body>
                    <div>
                      <span className={classes.temptitle}> {item}</span>
                      {subfields}
                    </div>
                  </Card.Body>
                );
              }
            }
            if (
              !withoutObj.includes(item) &&
              !spCase.includes(item) &&
              !checkboxCase.includes(item) &&
              !dietAndOtherCardsCase.includes(item) &&
              !signObjects.includes(item) &&
              localStorage.getItem(camelCaseName) != null
            ) {
              return (
                <Card.Body>
                  <div>
                    <span className={classes.temptitle}> {item}</span>
                    <div>{localStorage.getItem(camelCaseName)}</div>
                  </div>
                </Card.Body>
              );
            }
            if (signObjects.includes(item)) {
              return (
                <Card.Body>
                  <div>
                    <span className={classes.temptitle}> {item}</span>
                    <div>
                      {item == "Patient's Signature"
                        ? "I have received all relevant documents and records"
                        : ""}
                    </div>
                    <div>{localStorage.getItem(camelCaseName)}</div>
                    <br />
                    <br />
                    <hr />
                  </div>
                </Card.Body>
              );
            }
          }
        })
      );
    }

    if (localStorage.getItem("patientStatus") === "Existing") {
      let dispArr;
      displayJson.forEach((item) => {
        if (item["displayText"] == "Patient Information") {
          let ptobj = JSON.parse(item["finalValue"]);
          console.log("ptinfo", item["finalValue"]);
          let arr = [];
          for (let i in ptobj) {
            let key = i;
            let val = ptobj[key];
            arr.push(key + "- " + val);
          }
          dispArr = arr.map((ele) => {
            return <div>{ele}</div>;
          });
        }
        if (item["displayText"] == "Patient Information")
          setPatientDispObj(
            <Card.Body>
              <div>
                <span className={classes.temptitle}>Patient Information</span>
                <div>{dispArr}</div>
              </div>
            </Card.Body>
          );
      });
      setDispObj(
        displayJson.map((item) => {
          if (
            item["displayText"] != "Course Label" &&
            item["displayText"] != "Instructions Label" &&
            item["displayText"] != "Patient Information" &&
            !(
              (item["finalValue"] == null || item["finalValue"] == "") &&
              item["displayText"] != "Doctor's Signature" &&
              item["displayText"] != "Patient's Signature"
            )
          ) {
            return (
              <Card.Body>
                <div>
                  <span className={classes.temptitle}>
                    {" "}
                    {item["displayText"]}
                  </span>
                  <div>{item["finalValue"]}</div>
                </div>
              </Card.Body>
            );
          }
        })
      );
    }
  }, [props.prompt]);
  return (
    <div className={classes.tempcontainer}>
      {redirect}
      <div className={classes.rightTopDivDSPage}>
        <div className={classes.dsNameAndImgHeaderDiv}>
          <div className={classes.nameDischargeSummaryForNew}>
            {" "}
            {props.patient["name"]}
            <span className={classes.perAge}>
              {" "}
              {props.patient["age"]}/
              {props.patient["sex"] == "" || props.patient["sex"] == null
                ? ""
                : props.patient["sex"].substring(0, 1)}
            </span>
          </div>

          <div className={classes.contactActions}>
            {" "}
            <img
              className={classes.imgActionsDsShow}
              src={require("../assets/phone.png")}
            />
            <img
              className={classes.imgActionsDsShow}
              src={require("../assets/video-camera.png")}
            />
          </div>
        </div>
        <div className={classes.pullDsPageDropdown}>
          <div className={classes.btnPad}>{linkToCreatePg}</div>
          <div className={classes.btnPad}>
            <Button
              onClick={() => {
                localStorage.setItem("patient", JSON.stringify(props.patient));
                setRedirect(
                  <Redirect
                    to={{
                      pathname: "/dischargeSummaryCreate",
                      state: {
                        patient: props.patient,
                      },
                    }}
                  />
                );
              }}
            >
              New
            </Button>
          </div>
        </div>
      </div>

      <>
        <div className={classes.pullDsPageBottom}>
          <div className={classes.dsdispcenterdiv}>
            <Card className={classes.tempcard}>
              <div className={classes.pullDsPageCardHeader}>
                <h3 className={classes.pullDsPageCardHeaderTitle}>
                  State-{stateVal}
                </h3>
                <div className={classes.pullDsPageCardHeaderDropdown}>
                  {
                    <Dropdown className={classes.dropdownPullDsPg}>
                      <Dropdown.Toggle
                        variant="danger"
                        id="dropdown-basic"
                        className={classes.dropdownPullDsPg}
                      >
                        Actions
                      </Dropdown.Toggle>

                      <Dropdown.Menu>
                        <Dropdown.Item
                          disabled={stateVal != "DISCHARGED" ? false : true}
                          onClick={() => {
                            if (
                              localStorage.getItem("userId") !=
                              localStorage.getItem("doctorId")
                            )
                              setRedirect(
                                <Redirect
                                  to={{
                                    pathname: "/dsSendForApproval",
                                    state: { patient: props.patient },
                                  }}
                                />
                              );
                          }}
                        >
                          Send for Approval
                        </Dropdown.Item>
                        <Dropdown.Item
                          disabled={stateVal != "DISCHARGED" ? false : true}
                          onClick={() => handleSelfApprove()}
                        >
                          Self Approve
                        </Dropdown.Item>
                        <Dropdown.Item
                          disabled={stateVal != "DISCHARGED" ? false : true}
                          onClick={() => handleSelfApprove()}
                        >
                          Approve
                        </Dropdown.Item>
                        <Dropdown.Item
                          disabled={stateVal != "DISCHARGED" ? false : true}
                          onClick={() => handleApproveScheduled()}
                        >
                          Approve/Schedule
                        </Dropdown.Item>
                        <Dropdown.Item
                          disabled={stateVal != "DISCHARGED" ? false : true}
                          onClick={() => handleDischarge()}
                        >
                          Discharge
                        </Dropdown.Item>
                        <Dropdown.Item
                          disabled={stateVal != "DISCHARGED" ? false : true}
                        >
                          Verbal/Phone Approval
                        </Dropdown.Item>
                        <Dropdown.Item onClick={() => handleGeneratePdf()}>
                          Print
                        </Dropdown.Item>
                        <Dropdown.Item>Delete</Dropdown.Item>
                      </Dropdown.Menu>
                    </Dropdown>
                  }
                </div>
              </div>
              {/* temp code below */}
              <div id="divToPrint">
                {/* <Card.Body>
                <div>
                  <span className={classes.temptitle}> Date </span>
                  {"August 9"}
                </div>
                <div>
                  <span className={classes.temptitle}>Time </span>
                  {ds["time"]}
                </div>
              </Card.Body> */}
                {patientDispObj}
                <Card.Body>
                  <div>
                    <span className={classes.temptitle}> Doctor Name:</span>{" "}
                    {localStorage.getItem("doctorName")}
                  </div>
                  <div>
                    <span className={classes.temptitle}> Clinic Name: </span>
                    {ds["clinicName"]}
                    {localStorage.getItem("clinicName")}
                  </div>
                  <div>
                    <span className={classes.temptitle}>
                      {" "}
                      Organization Name:
                    </span>{" "}
                    {localStorage.getItem("clinicName")}
                  </div>
                </Card.Body>
                {dispObj}
                <div className={classes.thumbnailDiv}>{thumbnails}</div>
              </div>

              {/* uncomment the below part */}
              {/* <div id="divToPrint">
              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Date </span>
                  {ds["date"]}
                </div>
                <div>
                  <span className={classes.temptitle}>Time </span>
                  {ds["time"]}
                </div>
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Doctor Name:</span>{" "}
                  {ds["drName"]}
                </div>
                <div>
                  <span className={classes.temptitle}> Clinic Name: </span>
                  {ds["clinicName"]}
                </div>
                <div>
                  <span className={classes.temptitle}> Organization Name:</span>{" "}
                  {ds["clinicName"]}
                </div>
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Patient Name:</span>{" "}
                  {ds["patientName"]}
                </div>
                <div>
                  <span className={classes.temptitle}>
                    {" "}
                    Patient Card Number:{" "}
                  </span>
                  {ds["patientCardNo"]}
                </div>
                <div>
                  <span className={classes.temptitle}> Patient Visit:</span>{" "}
                  {ds["patientVisit"]}
                </div>
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Instructions</span>
                  <div>{ds["instruction"]}</div>
                </div>
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> AdviseRx</span>
                  <br />
                  {medicines}
                </div>
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Status</span>{" "}
                  <span className={classes.temptitleBlue}> {ds["status"]}</span>
                </div>
                <br />
                <div>
                  <span className={classes.temptitle}> Complaint</span>
                </div>
                <br />
                <div>
                  <span className={classes.temptitle}> Diagnosis</span>

                </div>
                <br />
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Investigations</span>
                  <div>{ds["investigation"]}</div>
                  
                </div>
              </Card.Body>

              <Card.Body>
                <div>
                  <span className={classes.temptitle}> Surgery</span>
                  <div>{ds["surgery"]}</div>
                </div>
                <br />
                <div>
                  <span className={classes.temptitle}> Chemotherapy</span>
                  <div>{ds["chemotherapy"]}</div>
                </div>
                <br />
                <div>
                  <span className={classes.temptitle}> Radiotherapy</span>
                  <div>{ds["radiotherapy"]}</div>
                </div>
                <br />
                <div>
                  <span className={classes.temptitle}> Procedure</span>

                </div>
                <br />

                <div>
                  <span className={classes.temptitle}> Remarks</span>
                </div>
              </Card.Body>
            </div> */}
            </Card>
          </div>
          {/* <div className={classes.pullDsSidePane}>
            <br />
            <div>{linkToCreatePg}</div>
            <br />
            <div>
              <Button
                onClick={() => {
                  localStorage.setItem(
                    "patient",
                    JSON.stringify(props.patient)
                  );
                  setRedirect(
                    <Redirect
                      to={{
                        pathname: "/dischargeSummaryCreate",
                        state: {
                          patient: props.patient,
                        },
                      }}
                    />
                  );
                }}
              >
                New
              </Button>
            </div>
            <br />
            <h4>Visits</h4>
            {visits}
          </div> */}
        </div>
      </>
    </div>
  );
};

export default PullPatientDischargeInfo;
